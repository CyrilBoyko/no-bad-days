{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.js","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","path","id","className","classes","dialog","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","dialogsItems","values","addMessage","newMessageText","compose","dispatch","addMessageActionCreator"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,4B,uICG1IC,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAe,IACtCC,EADqC,uKAGnC,OAAKC,KAAKC,MAAMN,OACT,kBAACG,EAAcE,KAAKC,OADI,kBAAC,IAAD,CAAUC,GAAG,eAHT,GACXC,IAAML,WAUtC,OAHqCM,YAAQX,EAARW,CAAoCL,K,+FCD9DM,EAXI,SAACJ,GAEhB,IAAIK,EAAO,YAAcL,EAAMM,GAE/B,OACI,yBAAKC,UAAWC,IAAQC,QACpB,kBAAC,IAAD,CAASR,GAAII,GAAOL,EAAMU,QCHvBC,EAJC,SAACX,GACb,OAAO,yBAAKO,UAAWC,IAAQC,QAAST,EAAMY,U,yCCC5CC,EAAcC,YAAiB,IAkBtBC,cAAU,CAACC,KAAM,wBAAjBD,EAhBQ,SAACf,GACpB,OACI,0BAAMiB,SAAUjB,EAAMkB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,SAAU,CAACC,IAAUV,GACrBH,KAAK,iBACLc,YAAY,wBAEvB,6BACI,6CCoBDC,EA9BC,SAACzB,GAEb,IAAIP,EAAQO,EAAM0B,YAEdC,EAAkBlC,EAAMmC,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYpB,KAAMoB,EAAEpB,KACRqB,IAAKD,EAAExB,GACPA,GAAIwB,EAAExB,QAE3D0B,EAAmBvC,EAAMwC,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASH,IAAKG,EAAE5B,GACPM,QAASsB,EAAEtB,aAMnE,OAAKZ,EAAMN,OAGP,yBAAKa,UAAWC,IAAQoB,SACpB,yBAAKrB,UAAWC,IAAQ2B,cACnBR,GAEL,yBAAKpB,UAAWC,IAAQyB,UACpB,6BAAMD,GACN,kBAAC,EAAD,CAAgBf,SAbR,SAACmB,GACjBpC,EAAMqC,WAAWD,EAAOE,qBAGF,kBAAC,IAAD,CAAUrC,GAAG,Y,wBCF5BsC,sBACXpC,aAfkB,SAACV,GACnB,MAAO,CACHiC,YAAajC,EAAMiC,gBAIF,SAACc,GACtB,MAAO,CACHH,WAAY,SAACC,GACTE,EAASC,YAAwBH,SAOzC1C,IAFW2C,CAGbd","file":"static/js/4.4a23ec01.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\"};","import React from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n});\n\nexport const withAuthRedirect = (Component) => {\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Redirect to='/login'/>;\n            return <Component {...this.props} />\n        }\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\n\n\n    return ConnectedAuthRedirectComponent;\n};","import React from \"react\";\nimport classes from \"./../Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\nconst DialogItem = (props) => {\n\n    let path = '/dialogs/' + props.id;\n\n    return (\n        <div className={classes.dialog}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n};\n\nexport default DialogItem;","import React from \"react\";\nimport classes from \"./../Dialogs.module.css\";\n\nconst Message = (props) => {\n    return <div className={classes.dialog}>{props.message}</div>\n};\n\nexport default Message;","import {Field, reduxForm} from \"redux-form\";\nimport React from \"react\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\n\nconst maxLength50 = maxLengthCreator(50);\n\nconst AddMessageForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea}\n                       validate={[required, maxLength50]}\n                       name='newMessageText'\n                       placeholder='Enter your message'/>\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n};\n\nexport default reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm);","import React from \"react\";\nimport classes from \"./Dialogs.module.css\"\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {Redirect} from \"react-router-dom\";\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\n\nconst Dialogs = (props) => {\n\n    let state = props.dialogsPage;\n\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name}\n                                                             key={d.id}\n                                                             id={d.id}/>);\n\n    let messagesElements = state.messages.map(m => <Message key={m.id}\n                                                            message={m.message}/>);\n\n    let addNewMessage = (values) => {\n        props.addMessage(values.newMessageText);\n    };\n\n    if (!props.isAuth) return <Redirect to='/login'/>;\n\n    return (\n        <div className={classes.dialogs}>\n            <div className={classes.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={classes.messages}>\n                <div>{messagesElements}</div>\n                <AddMessageForm onSubmit={addNewMessage}/>\n            </div>\n        </div>\n    )\n};\n\nexport default Dialogs;","import {addMessageActionCreator} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addMessage: (newMessageText) => {\n            dispatch(addMessageActionCreator(newMessageText));\n        }\n    }\n};\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs);"],"sourceRoot":""}