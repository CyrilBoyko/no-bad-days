{"ast":null,"code":"import { //auth,\nauthAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'no_bad_days-network/auth/SET_USER_DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n/*export const authThunk = (userId, login, email) => {\n    return (dispatch) => {\n        dispatch(setAuthUserData(userId, login, email));\n        authAPI.me().then(data => {\n            if (data.resultCode == 0) {\n                let {id, login, email} = data.data;\n                dispatch(setAuthUserData(id, login, email));\n            }\n        });\n    }\n}*/\n\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => async dispatch => {\n  let response = await authAPI.me();\n\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      email,\n      login\n    } = response.data.data;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n};\n/*\nexport const login = (email, password, rememberMe) => (dispatch) => {\n    authAPI.login(email, password, rememberMe).then(response => {\n        if (response.data.resultCode === 0) {\n            dispatch(getAuthUserData())\n        } else {\n            let action = stopSubmit(\"login\", /!*{email: \"Email is wrong\"}*!/{error: \"Email is wrong\"});\n            dispatch(action);\n        }\n    });\n}\n*/\n\nexport const login = (email, password, rememberMe) => async dispatch => {\n  let response = await authAPI.login(email, password, rememberMe);\n\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData());\n  } else {\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n    dispatch(stopSubmit(\"login\", {\n      _error: message\n    }));\n  }\n};\nexport const logout = () => async dispatch => {\n  let response = await authAPI.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserData(null, null, null, false));\n  }\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/a1/Desktop/app/my-app/src/redux/auth-reducer.js"],"names":["authAPI","stopSubmit","SET_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","response","me","data","resultCode","id","password","rememberMe","message","messages","length","_error","logout"],"mappings":"AAAA,SAAQ;AACJA,OADJ,QAEO,YAFP;AAGA,SAAQC,UAAR,QAAyB,YAAzB;AAEA,MAAMC,aAAa,GAAG,wCAAtB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAIJ;AACI,aAAOH,KAAP;AAPR;AASH,CAVD;AAYA;;;;;;;;;;;;;AAYA,OAAO,MAAMI,eAAe,GAAG,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,MAAmC;AAACI,EAAAA,IAAI,EAAET,aAAP;AAAsBU,EAAAA,OAAO,EAAE;AAACR,IAAAA,MAAD;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB;AAA/B,CAAnC,CAAxB;AAEP,OAAO,MAAMO,eAAe,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACrD,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAACiB,EAAR,EAArB;;AAEI,MAAID,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChC,QAAI;AAACC,MAAAA,EAAD;AAAKf,MAAAA,KAAL;AAAYC,MAAAA;AAAZ,QAAqBU,QAAQ,CAACE,IAAT,CAAcA,IAAvC;AACAH,IAAAA,QAAQ,CAACF,eAAe,CAACO,EAAD,EAAKf,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACH;AACJ,CAPE;AASP;;;;;;;;;;;;;AAaA,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQgB,QAAR,EAAkBC,UAAlB,KAAiC,MAAOP,QAAP,IAAoB;AACtE,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBgB,QAArB,EAA+BC,UAA/B,CAArB;;AACI,MAAIN,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCJ,IAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH,GAFD,MAEO;AACH,QAAIS,OAAO,GAAGP,QAAQ,CAACE,IAAT,CAAcM,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCT,QAAQ,CAACE,IAAT,CAAcM,QAAd,CAAuB,CAAvB,CAApC,GAAgE,YAA9E;AACAT,IAAAA,QAAQ,CAACd,UAAU,CAAC,OAAD,EAAU;AAACyB,MAAAA,MAAM,EAAEH;AAAT,KAAV,CAAX,CAAR;AACH;AACR,CARM;AAUP,OAAO,MAAMI,MAAM,GAAG,MAAM,MAAOZ,QAAP,IAAoB;AAC5C,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAAC2B,MAAR,EAArB;;AACI,MAAIX,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCJ,IAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AACR,CALM;AAOP,eAAeL,WAAf","sourcesContent":["import {//auth,\n    authAPI\n} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\n\nconst SET_USER_DATA = 'no_bad_days-network/auth/SET_USER_DATA';\n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state;\n    }\n}\n\n/*export const authThunk = (userId, login, email) => {\n    return (dispatch) => {\n        dispatch(setAuthUserData(userId, login, email));\n        authAPI.me().then(data => {\n            if (data.resultCode == 0) {\n                let {id, login, email} = data.data;\n                dispatch(setAuthUserData(id, login, email));\n            }\n        });\n    }\n}*/\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({type: SET_USER_DATA, payload: {userId, email, login, isAuth}})\n\nexport const getAuthUserData = () => async (dispatch) => {\n    let response = await authAPI.me();\n\n        if (response.data.resultCode === 0) {\n            let {id, email, login} = response.data.data;\n            dispatch(setAuthUserData(id, email, login, true));\n        }\n    }\n\n/*\nexport const login = (email, password, rememberMe) => (dispatch) => {\n    authAPI.login(email, password, rememberMe).then(response => {\n        if (response.data.resultCode === 0) {\n            dispatch(getAuthUserData())\n        } else {\n            let action = stopSubmit(\"login\", /!*{email: \"Email is wrong\"}*!/{error: \"Email is wrong\"});\n            dispatch(action);\n        }\n    });\n}\n*/\n\nexport const login = (email, password, rememberMe) => async (dispatch) => {\n    let response = await authAPI.login(email, password, rememberMe);\n        if (response.data.resultCode === 0) {\n            dispatch(getAuthUserData())\n        } else {\n            let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n            dispatch(stopSubmit(\"login\", {_error: message}));\n        }\n}\n\nexport const logout = () => async (dispatch) => {\n    let response = await authAPI.logout();\n        if (response.data.resultCode === 0) {\n            dispatch(setAuthUserData(null, null, null, false));\n        }\n}\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}