{"ast":null,"code":"var _jsxFileName = \"/Users/a1/Desktop/app/my-app/src/components/Dialogs/DialogsContainer.jsx\";\nimport React from 'react';\nimport { addMessageActionCreator, updateNewMessageTextActionCreator } from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\n/*const DialogsContainer = () => {\n\n    return (\n        <StoreContext.Consumer>\n            {store => {\n                let state = store.getState().dialogsPage;\n\n                let onAddMessageClick = () => {\n                    store.dispatch(addMessageActionCreator());\n                }\n\n                let onMessageChange = (text) => {\n                    let action = updateNewMessageTextActionCreator(text)\n                    store.dispatch(action);\n                }\n                return (\n                    <Dialogs updateNewMessageText={onMessageChange}\n                             addMessage={onAddMessageClick}\n                             dialogsPage={state}/>\n                )\n            }\n            }\n        </StoreContext.Consumer>\n    )\n}*/\n\nlet mapStateToProps = state => {\n  return {\n    dialogsPage: state.dialogsPage,\n    isAuth: state.auth.isAuth\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    updateNewMessageText: text => {\n      let action = updateNewMessageTextActionCreator(text);\n      dispatch(action);\n    },\n    addMessage: () => {\n      dispatch(addMessageActionCreator());\n    }\n  };\n};\n\nlet AuthRedirectComponent = props => {\n  if (!this.props.isAuth) return /*#__PURE__*/React.createElement(Redirect, {\n    to: \"login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 36\n    }\n  });\n  return /*#__PURE__*/React.createElement(Dialogs, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 12\n    }\n  }));\n};\n\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\nexport default DialogsContainer;","map":{"version":3,"sources":["/Users/a1/Desktop/app/my-app/src/components/Dialogs/DialogsContainer.jsx"],"names":["React","addMessageActionCreator","updateNewMessageTextActionCreator","Dialogs","connect","Redirect","mapStateToProps","state","dialogsPage","isAuth","auth","mapDispatchToProps","dispatch","updateNewMessageText","text","action","addMessage","AuthRedirectComponent","props","DialogsContainer"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,uBAAR,EAAiCC,iCAAjC,QAAyE,6BAAzE;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,IAAIC,eAAe,GAAIC,KAAD,IAAW;AAC7B,SAAO;AACHC,IAAAA,WAAW,EAAED,KAAK,CAACC,WADhB;AAEHC,IAAAA,MAAM,EAAEF,KAAK,CAACG,IAAN,CAAWD;AAFhB,GAAP;AAIH,CALD;;AAOA,IAAIE,kBAAkB,GAAIC,QAAD,IAAc;AACnC,SAAO;AACHC,IAAAA,oBAAoB,EAAGC,IAAD,IAAU;AAC5B,UAAIC,MAAM,GAAGb,iCAAiC,CAACY,IAAD,CAA9C;AACAF,MAAAA,QAAQ,CAACG,MAAD,CAAR;AACH,KAJE;AAKHC,IAAAA,UAAU,EAAE,MAAM;AACdJ,MAAAA,QAAQ,CAACX,uBAAuB,EAAxB,CAAR;AACH;AAPE,GAAP;AASH,CAVD;;AAYA,IAAIgB,qBAAqB,GAAIC,KAAD,IAAW;AACnC,MAAI,CAAC,KAAKA,KAAL,CAAWT,MAAhB,EAAwB,oBAAO,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACxB,sBAAO,oBAAC,OAAD,oBAAaS,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACH,CAHD;;AAKA,MAAMC,gBAAgB,GAAGf,OAAO,CAACE,eAAD,EAAkBK,kBAAlB,CAAP,CAA6CM,qBAA7C,CAAzB;AAEA,eAAeE,gBAAf","sourcesContent":["import React from 'react';\nimport {addMessageActionCreator, updateNewMessageTextActionCreator} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {Redirect} from \"react-router-dom\";\n\n/*const DialogsContainer = () => {\n\n    return (\n        <StoreContext.Consumer>\n            {store => {\n                let state = store.getState().dialogsPage;\n\n                let onAddMessageClick = () => {\n                    store.dispatch(addMessageActionCreator());\n                }\n\n                let onMessageChange = (text) => {\n                    let action = updateNewMessageTextActionCreator(text)\n                    store.dispatch(action);\n                }\n                return (\n                    <Dialogs updateNewMessageText={onMessageChange}\n                             addMessage={onAddMessageClick}\n                             dialogsPage={state}/>\n                )\n            }\n            }\n        </StoreContext.Consumer>\n    )\n}*/\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage,\n        isAuth: state.auth.isAuth\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        updateNewMessageText: (text) => {\n            let action = updateNewMessageTextActionCreator(text)\n            dispatch(action);\n        },\n        addMessage: () => {\n            dispatch(addMessageActionCreator());\n        }\n    }\n}\n\nlet AuthRedirectComponent = (props) => {\n    if (!this.props.isAuth) return <Redirect to='login'/>\n    return <Dialogs {...props} />\n}\n\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\n\nexport default DialogsContainer;"]},"metadata":{},"sourceType":"module"}