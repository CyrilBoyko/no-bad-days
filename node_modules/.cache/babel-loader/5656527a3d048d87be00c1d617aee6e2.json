{"ast":null,"code":"import React from 'react';\nimport { addMessageActionCreator, updateNewMessageTextActionCreator } from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\n/*const DialogsContainer = () => {\n\n    return (\n        <StoreContext.Consumer>\n            {store => {\n                let state = store.getState().dialogsPage;\n\n                let onAddMessageClick = () => {\n                    store.dispatch(addMessageActionCreator());\n                }\n\n                let onMessageChange = (text) => {\n                    let action = updateNewMessageTextActionCreator(text)\n                    store.dispatch(action);\n                }\n                return (\n                    <Dialogs updateNewMessageText={onMessageChange}\n                             addMessage={onAddMessageClick}\n                             dialogsPage={state}/>\n                )\n            }\n            }\n        </StoreContext.Consumer>\n    )\n}*/\n\nlet mapStateToProps = state => {\n  return {\n    dialogsPage: state.dialogsPage\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    updateNewMessageText: text => {\n      let action = updateNewMessageTextActionCreator(text);\n      dispatch(action);\n    },\n    addMessage: () => {\n      dispatch(addMessageActionCreator());\n    }\n  };\n};\n\ncompose()();\nlet AuthRedirectComponent = withAuthRedirect(Dialogs);\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\nexport default DialogsContainer;","map":{"version":3,"sources":["/Users/a1/Desktop/app/my-app/src/components/Dialogs/DialogsContainer.jsx"],"names":["React","addMessageActionCreator","updateNewMessageTextActionCreator","Dialogs","connect","withAuthRedirect","compose","mapStateToProps","state","dialogsPage","mapDispatchToProps","dispatch","updateNewMessageText","text","action","addMessage","AuthRedirectComponent","DialogsContainer"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,uBAAR,EAAiCC,iCAAjC,QAAyE,6BAAzE;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,gBAAR,QAA+B,4BAA/B;AACA,SAAQC,OAAR,QAAsB,OAAtB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,IAAIC,eAAe,GAAIC,KAAD,IAAW;AAC7B,SAAO;AACHC,IAAAA,WAAW,EAAED,KAAK,CAACC;AADhB,GAAP;AAGH,CAJD;;AAMA,IAAIC,kBAAkB,GAAIC,QAAD,IAAc;AACnC,SAAO;AACHC,IAAAA,oBAAoB,EAAGC,IAAD,IAAU;AAC5B,UAAIC,MAAM,GAAGZ,iCAAiC,CAACW,IAAD,CAA9C;AACAF,MAAAA,QAAQ,CAACG,MAAD,CAAR;AACH,KAJE;AAKHC,IAAAA,UAAU,EAAE,MAAM;AACdJ,MAAAA,QAAQ,CAACV,uBAAuB,EAAxB,CAAR;AACH;AAPE,GAAP;AASH,CAVD;;AAYAK,OAAO;AAEP,IAAIU,qBAAqB,GAAGX,gBAAgB,CAACF,OAAD,CAA5C;AAEA,MAAMc,gBAAgB,GAAGb,OAAO,CAACG,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CM,qBAA7C,CAAzB;AAEA,eAAeC,gBAAf","sourcesContent":["import React from 'react';\nimport {addMessageActionCreator, updateNewMessageTextActionCreator} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n/*const DialogsContainer = () => {\n\n    return (\n        <StoreContext.Consumer>\n            {store => {\n                let state = store.getState().dialogsPage;\n\n                let onAddMessageClick = () => {\n                    store.dispatch(addMessageActionCreator());\n                }\n\n                let onMessageChange = (text) => {\n                    let action = updateNewMessageTextActionCreator(text)\n                    store.dispatch(action);\n                }\n                return (\n                    <Dialogs updateNewMessageText={onMessageChange}\n                             addMessage={onAddMessageClick}\n                             dialogsPage={state}/>\n                )\n            }\n            }\n        </StoreContext.Consumer>\n    )\n}*/\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        updateNewMessageText: (text) => {\n            let action = updateNewMessageTextActionCreator(text)\n            dispatch(action);\n        },\n        addMessage: () => {\n            dispatch(addMessageActionCreator());\n        }\n    }\n}\n\ncompose()()\n\nlet AuthRedirectComponent = withAuthRedirect(Dialogs);\n\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\n\nexport default DialogsContainer;"]},"metadata":{},"sourceType":"module"}