{"ast":null,"code":"var _jsxFileName = \"/Users/a1/Desktop/app/my-app/src/components/Dialogs/DialogsContainer.jsx\";\nimport React from 'react';\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport { addMessageActionCreator, updateNewMessageTextActionCreator } from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\n\nconst DialogsContainer = props => {\n  let state = props.store.getState().dialogsPage;\n  let dialogsElements = state.dialogs.map(d => /*#__PURE__*/React.createElement(DialogItem, {\n    name: d.name,\n    id: d.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 51\n    }\n  }));\n  let messagesElements = state.messages.map(m => /*#__PURE__*/React.createElement(Message, {\n    message: m.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 53\n    }\n  }));\n  let newMessageText = state.newMessageText;\n  let newMessageElement = React.createRef();\n\n  let addMessage = () => {\n    props.store.dispatch(addMessageActionCreator());\n  };\n\n  let onMessageChange = e => {\n    let text = e.target.value;\n    let action = updateNewMessageTextActionCreator(text);\n    props.store.dispatch(action);\n  };\n\n  return /*#__PURE__*/React.createElement(Dialogs, {\n    updateNewMessageText: onMessageChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  });\n};\n\nexport default DialogsContainer;","map":{"version":3,"sources":["/Users/a1/Desktop/app/my-app/src/components/Dialogs/DialogsContainer.jsx"],"names":["React","DialogItem","Message","addMessageActionCreator","updateNewMessageTextActionCreator","Dialogs","DialogsContainer","props","state","store","getState","dialogsPage","dialogsElements","dialogs","map","d","name","id","messagesElements","messages","m","message","newMessageText","newMessageElement","createRef","addMessage","dispatch","onMessageChange","e","text","target","value","action"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAAQC,uBAAR,EAAiCC,iCAAjC,QAAyE,6BAAzE;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAEhC,MAAIC,KAAK,GAAGD,KAAK,CAACE,KAAN,CAAYC,QAAZ,GAAuBC,WAAnC;AAEA,MAAIC,eAAe,GAAGJ,KAAK,CAACK,OAAN,CAAcC,GAAd,CAAmBC,CAAC,iBAAI,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAEA,CAAC,CAACC,IAApB;AAA0B,IAAA,EAAE,EAAED,CAAC,CAACE,EAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAxB,CAAtB;AAEA,MAAIC,gBAAgB,GAAGV,KAAK,CAACW,QAAN,CAAeL,GAAf,CAAoBM,CAAC,iBAAI,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAEA,CAAC,CAACC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAzB,CAAvB;AAEA,MAAIC,cAAc,GAAGd,KAAK,CAACc,cAA3B;AAEA,MAAIC,iBAAiB,GAAGvB,KAAK,CAACwB,SAAN,EAAxB;;AAEA,MAAIC,UAAU,GAAG,MAAM;AACnBlB,IAAAA,KAAK,CAACE,KAAN,CAAYiB,QAAZ,CAAqBvB,uBAAuB,EAA5C;AACH,GAFD;;AAIA,MAAIwB,eAAe,GAAIC,CAAD,IAAO;AACzB,QAAIC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASC,KAApB;AACA,QAAIC,MAAM,GAAG5B,iCAAiC,CAACyB,IAAD,CAA9C;AACAtB,IAAAA,KAAK,CAACE,KAAN,CAAYiB,QAAZ,CAAqBM,MAArB;AACH,GAJD;;AAMA,sBAAQ,oBAAC,OAAD;AAAS,IAAA,oBAAoB,EAAEL,eAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR;AACH,CAvBD;;AAyBA,eAAerB,gBAAf","sourcesContent":["import React from 'react';\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {addMessageActionCreator, updateNewMessageTextActionCreator} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\n\nconst DialogsContainer = (props) => {\n\n    let state = props.store.getState().dialogsPage;\n\n    let dialogsElements = state.dialogs.map( d => <DialogItem name={d.name} id={d.id} /> );\n\n    let messagesElements = state.messages.map( m => <Message message={m.message}/>);\n\n    let newMessageText = state.newMessageText;\n\n    let newMessageElement = React.createRef();\n\n    let addMessage = () => {\n        props.store.dispatch(addMessageActionCreator());\n    }\n\n    let onMessageChange = (e) => {\n        let text = e.target.value;\n        let action = updateNewMessageTextActionCreator(text)\n        props.store.dispatch(action);\n    }\n\n    return (<Dialogs updateNewMessageText={onMessageChange} />)\n}\n\nexport default DialogsContainer;"]},"metadata":{},"sourceType":"module"}