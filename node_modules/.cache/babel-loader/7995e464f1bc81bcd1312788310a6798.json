{"ast":null,"code":"import { stopSubmit } from \"redux-form\";\nimport { profileAPI } from \"../api/profile-api\";\nconst ADD_POST = 'ADD-POST';\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\nconst SET_STATUS = 'SET_STATUS';\nconst DELETE_POST = 'DELETE_POST';\nconst SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS';\nlet initialState = {\n  posts: [{\n    id: 1,\n    message: 'Hi, how are you?',\n    likesCount: 0\n  }, {\n    id: 2,\n    message: 'It\\'s my first post',\n    likesCount: 23\n  }],\n  profile: null,\n  status: '',\n  newPostText: ''\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      {\n        let newPost = {\n          id: state.posts.length + 1,\n          message: action.newPostText,\n          likesCount: 0\n        };\n        return { ...state,\n          posts: [...state.posts, newPost],\n          newPostText: ''\n        };\n      }\n\n    case SET_USER_PROFILE:\n      {\n        return { ...state,\n          profile: action.profile\n        };\n      }\n\n    case SET_STATUS:\n      {\n        return { ...state,\n          status: action.status\n        };\n      }\n\n    case DELETE_POST:\n      {\n        return { ...state,\n          posts: state.posts.filter(p => p.id !== action.postId)\n        };\n      }\n\n    case SAVE_PHOTO_SUCCESS:\n      {\n        return { ...state,\n          profile: { ...state.profile,\n            photos: action.photos\n          }\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = {};\n/*type AddPostActionCreatorActionType = {\n    type: typeof ADD_POST\n    newPostText: string\n}*/\n\nexport const addPostActionCreator = newPostText => ({\n  type: ADD_POST,\n  newPostText\n});\n/*type SetUserProfileActionType = {\n    type: typeof SET_USER_PROFILE\n    profile: ProfileType\n}*/\n\nexport const setUserProfile = profile => ({\n  type: SET_USER_PROFILE,\n  profile\n});\n/*type DeletePostActionType = {\n    type: typeof DELETE_POST\n    postId: number\n}*/\n\nexport const deletePost = postId => ({\n  type: DELETE_POST,\n  postId\n});\n/*\ntype SavePhotoSuccessActionType = {\n    type: typeof SAVE_PHOTO_SUCCESS\n    photos: PhotosType\n}\n*/\n\nexport const savePhotoSuccess = photos => ({\n  type: SAVE_PHOTO_SUCCESS,\n  photos\n});\nexport const getUserProfile = userId => async dispatch => {\n  const data = await profileAPI.getProfile(userId);\n  dispatch(setUserProfile(data));\n};\n/*type SetStatusActionType = {\n    type: typeof SET_STATUS\n    status: string\n}*/\n\nexport const setStatus = status => ({\n  type: SET_STATUS,\n  status\n});\nexport const getStatus = userId => async dispatch => {\n  const data = await profileAPI.getStatus(userId);\n  dispatch(setStatus(data));\n};\nexport const updateStatus = status => async dispatch => {\n  try {\n    const data = await profileAPI.updateStatus(status);\n\n    if (data.resultCode === 0) {\n      dispatch(setStatus(status));\n    }\n  } catch (error) {//\n  }\n};\nexport const savePhoto = file => async dispatch => {\n  const data = await profileAPI.savePhoto(file);\n\n  if (data.resultCode === 0) {\n    dispatch(savePhotoSuccess(data.data.photos));\n  }\n};\nexport const saveProfile = profile => async (dispatch, getState) => {\n  const userId = getState().auth.userId;\n  const data = await profileAPI.saveProfile(profile);\n\n  if (data.resultCode === 0) {\n    dispatch(getUserProfile(userId));\n  } else {\n    dispatch(stopSubmit(\"edit-profile\", {\n      _error: data.messages[0]\n    }));\n    return Promise.reject(data.messages[0]);\n  }\n};\nexport default profileReducer;","map":{"version":3,"sources":["/Users/a1/Desktop/app/no-bad-days-social-network-demo/src/redux/profile-reducer.ts"],"names":["stopSubmit","profileAPI","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","SAVE_PHOTO_SUCCESS","initialState","posts","id","message","likesCount","profile","status","newPostText","profileReducer","state","action","type","newPost","length","filter","p","postId","photos","actions","addPostActionCreator","setUserProfile","deletePost","savePhotoSuccess","getUserProfile","userId","dispatch","data","getProfile","setStatus","getStatus","updateStatus","resultCode","error","savePhoto","file","saveProfile","getState","auth","_error","messages","Promise","reject"],"mappings":"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","sourcesContent":["import {stopSubmit} from \"redux-form\";\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\nimport {usersAPI} from \"../api/users-api\";\nimport {profileAPI} from \"../api/profile-api\";\n\nconst ADD_POST = 'ADD-POST';\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\nconst SET_STATUS = 'SET_STATUS';\nconst DELETE_POST = 'DELETE_POST';\nconst SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS';\n\nlet initialState = {\n    posts: [\n        {id: 1, message: 'Hi, how are you?', likesCount: 0},\n        {id: 2, message: 'It\\'s my first post', likesCount: 23}\n    ] as Array<PostType>,\n    profile: null as ProfileType | null,\n    status: '',\n    newPostText: ''\n};\n\nexport type InitialStateType = typeof initialState\n\nconst profileReducer = (state = initialState, action: any): InitialStateType => {\n    switch (action.type) {\n        case ADD_POST: {\n            let newPost = {\n                id: state.posts.length + 1,\n                message: action.newPostText,\n                likesCount: 0\n            };\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n                newPostText: ''\n            };\n        }\n        case SET_USER_PROFILE: {\n            return {\n                ...state,\n                profile: action.profile\n            }\n        }\n        case SET_STATUS: {\n            return {\n                ...state,\n                status: action.status\n            }\n        }\n        case DELETE_POST: {\n            return {\n                ...state, posts: state.posts.filter(p => p.id !== action.postId)\n            }\n        }\n        case SAVE_PHOTO_SUCCESS: {\n            return {\n                ...state, profile: {...state.profile, photos: action.photos} as ProfileType\n            }\n        }\n        default:\n            return state;\n    }\n};\n\nexport const actions = {\n    \n}\n\n/*type AddPostActionCreatorActionType = {\n    type: typeof ADD_POST\n    newPostText: string\n}*/\n\nexport const addPostActionCreator = (newPostText: string) => ({type: ADD_POST, newPostText});\n\n/*type SetUserProfileActionType = {\n    type: typeof SET_USER_PROFILE\n    profile: ProfileType\n}*/\n\nexport const setUserProfile = (profile: ProfileType) => ({type: SET_USER_PROFILE, profile});\n\n/*type DeletePostActionType = {\n    type: typeof DELETE_POST\n    postId: number\n}*/\n\nexport const deletePost = (postId: number) => ({type: DELETE_POST, postId});\n\n/*\ntype SavePhotoSuccessActionType = {\n    type: typeof SAVE_PHOTO_SUCCESS\n    photos: PhotosType\n}\n*/\n\nexport const savePhotoSuccess = (photos: PhotosType) => ({type: SAVE_PHOTO_SUCCESS, photos});\n\nexport const getUserProfile = (userId: number) => async (dispatch: any) => {\n    const data = await profileAPI.getProfile(userId);\n    dispatch(setUserProfile(data));\n};\n\n/*type SetStatusActionType = {\n    type: typeof SET_STATUS\n    status: string\n}*/\n\nexport const setStatus = (status: string) => ({type: SET_STATUS, status});\n\nexport const getStatus = (userId: number) => async (dispatch: any) => {\n    const data = await profileAPI.getStatus(userId);\n    dispatch(setStatus(data));\n};\n\nexport const updateStatus = (status: string) => async (dispatch: any) => {\n    try {\n        const data = await profileAPI.updateStatus(status);\n        if (data.resultCode === 0) {\n            dispatch(setStatus(status));\n        }\n    } catch (error) {\n        //\n    }\n};\n\nexport const savePhoto = (file: any) => async (dispatch: any) => {\n    const data = await profileAPI.savePhoto(file);\n    if (data.resultCode === 0) {\n        dispatch(savePhotoSuccess(data.data.photos));\n    }\n};\n\nexport const saveProfile = (profile: ProfileType) => async (dispatch: any, getState: any) => {\n    const userId = getState().auth.userId;\n    const data = await profileAPI.saveProfile(profile);\n    if (data.resultCode === 0) {\n        dispatch(getUserProfile(userId));\n    } else {\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}));\n        return Promise.reject(data.messages[0]);\n    }\n};\n\nexport default profileReducer;"]},"metadata":{},"sourceType":"module"}