{"ast":null,"code":"import _regeneratorRuntime from\"/Users/a1/Desktop/app/no-bad-days-social-network-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/a1/Desktop/app/no-bad-days-social-network-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"/Users/a1/Desktop/app/no-bad-days-social-network-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{authAPI,ResultCodeForCaptcha,ResultCodesEnum,securityAPI}from\"../api/api\";import{stopSubmit}from\"redux-form\";var SET_USER_DATA='no_bad_days-network/auth/SET_USER_DATA';var GET_CAPTCHA_URL_SUCCESS='no_bad_days-network/auth/GET_CAPTCHA_URL_SUCCESS';var initialState={userId:null,email:null,login:null,isAuth:false,captchaUrl:null// if null, then captcha is not required\n};var authReducer=function authReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case SET_USER_DATA:case GET_CAPTCHA_URL_SUCCESS:return _objectSpread({},state,{},action.payload);default:return state;}};export var setAuthUserData=function setAuthUserData(userId,email,login,isAuth){return{type:SET_USER_DATA,payload:{userId:userId,email:email,login:login,isAuth:isAuth}};};export var getCaptchaUrlSuccess=function getCaptchaUrlSuccess(captchaUrl){return{type:GET_CAPTCHA_URL_SUCCESS,payload:{captchaUrl:captchaUrl}};};export var getAuthUserData=function getAuthUserData(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var meData,_meData$data,id,email,_login;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return authAPI.me();case 2:meData=_context.sent;if(meData.resultCode===ResultCodesEnum.Success){_meData$data=meData.data,id=_meData$data.id,email=_meData$data.email,_login=_meData$data.login;dispatch(setAuthUserData(id,email,_login,true));}case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};export var login=function login(email,password,rememberMe,captcha){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var data,message;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return authAPI.login(email,password,rememberMe,captcha);case 2:data=_context2.sent;if(data.resultCode===ResultCodesEnum.Success){// success, get auth data\ndispatch(getAuthUserData());}else{if(data.resultCode===ResultCodeForCaptcha.CaptchaIsRequired){dispatch(getCaptchaUrl());}message=data.messages.length>0?data.messages[0]:\"Some error\";dispatch(stopSubmit(\"login\",{_error:message}));}case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};export var getCaptchaUrl=function getCaptchaUrl(){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){var response,captchaUrl;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return securityAPI.getCaptchaUrl();case 2:response=_context3.sent;captchaUrl=response.data.url;dispatch(getCaptchaUrlSuccess(captchaUrl));case 5:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref3.apply(this,arguments);};}();};export var logout=function logout(){return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch){var response;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return authAPI.logout();case 2:response=_context4.sent;if(response.data.resultCode===ResultCodesEnum.Success){dispatch(setAuthUserData(null,null,null,false));}case 4:case\"end\":return _context4.stop();}}},_callee4);}));return function(_x4){return _ref4.apply(this,arguments);};}();};export default authReducer;","map":{"version":3,"sources":["/Users/a1/Desktop/app/no-bad-days-social-network-demo/src/redux/auth-reducer.ts"],"names":["authAPI","ResultCodeForCaptcha","ResultCodesEnum","securityAPI","stopSubmit","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","initialState","userId","email","login","isAuth","captchaUrl","authReducer","state","action","type","payload","setAuthUserData","getCaptchaUrlSuccess","getAuthUserData","dispatch","me","meData","resultCode","Success","data","id","password","rememberMe","captcha","CaptchaIsRequired","getCaptchaUrl","message","messages","length","_error","response","url","logout"],"mappings":"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","sourcesContent":["import {authAPI, ResultCodeForCaptcha, ResultCodesEnum, securityAPI} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\n\nconst SET_USER_DATA = 'no_bad_days-network/auth/SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'no_bad_days-network/auth/GET_CAPTCHA_URL_SUCCESS';\n\nlet initialState = {\n    userId: null as number | null,\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false as boolean,\n    captchaUrl: null as string | null // if null, then captcha is not required\n};\n\nexport type InitialStateType = typeof initialState\n\nconst authReducer = (state = initialState, action: any): InitialStateType => {\n    switch (action.type) {\n        case SET_USER_DATA:\n        case GET_CAPTCHA_URL_SUCCESS:\n            return {\n                ...state,\n                ...action.payload\n            };\n        default:\n            return state;\n    }\n};\n\ntype SetAuthUserDataActionPayloadType = {\n    userId: number | null\n    email: string | null\n    login: string | null\n    isAuth: boolean\n}\n\ntype SetAuthUserDataActionType = {\n    type: typeof SET_USER_DATA\n    payload: SetAuthUserDataActionPayloadType\n}\n\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean): SetAuthUserDataActionType => ({\n    type: SET_USER_DATA, payload:\n        {userId, email, login, isAuth}\n});\n\ntype GetCaptchaUrlSuccessActionType = {\n    type: typeof GET_CAPTCHA_URL_SUCCESS,\n    payload: {captchaUrl: string}\n}\n\nexport const getCaptchaUrlSuccess = (captchaUrl: string): GetCaptchaUrlSuccessActionType => ({\n    type: GET_CAPTCHA_URL_SUCCESS,\n    payload: {captchaUrl}\n});\n\nexport const getAuthUserData = () => async (dispatch: any) => {\n    const meData = await authAPI.me();\n\n    if (meData.resultCode === ResultCodesEnum.Success) {\n        let {id, email, login} = meData.data;\n        dispatch(setAuthUserData(id, email, login, true));\n    }\n};\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string) => async (dispatch: any) => {\n    const data = await authAPI.login(email, password, rememberMe, captcha);\n    if (data.resultCode === ResultCodesEnum.Success) {\n        // success, get auth data\n        dispatch(getAuthUserData())\n    } else {\n        if (data.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\n            dispatch(getCaptchaUrl());\n        }\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\n        dispatch(stopSubmit(\"login\", {_error: message}));\n    }\n};\n\nexport const getCaptchaUrl = () => async (dispatch: any) => {\n    const response = await securityAPI.getCaptchaUrl();\n    const captchaUrl = response.data.url;\n    dispatch(getCaptchaUrlSuccess(captchaUrl));\n\n};\n\nexport const logout = () => async (dispatch: any) => {\n    const response = await authAPI.logout();\n    if (response.data.resultCode === ResultCodesEnum.Success) {\n        dispatch(setAuthUserData(null, null, null, false));\n    }\n};\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}