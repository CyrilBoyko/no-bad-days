{"ast":null,"code":"import { updateObjectInArray } from \"../utils/validators/object-helpers\";\nimport { usersAPI } from \"../api/users-api\";\n/*const FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';*/\n\nlet initialState = {\n  users: [],\n  pageSize: 10,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: true,\n  followingInProgress: [] // array of users ids\n\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'FOLLOW':\n      return { ...state,\n        users: updateObjectInArray(state.users, action.userId, 'id', {\n          followed: true\n        })\n      };\n\n    case 'UNFOLLOW':\n      return { ...state,\n        users: updateObjectInArray(state.users, action.userId, 'id', {\n          followed: false\n        })\n      };\n\n    case 'SET_USERS':\n      {\n        return { ...state,\n          users: action.users\n        };\n      }\n\n    case 'SET_CURRENT_PAGE':\n      {\n        return { ...state,\n          currentPage: action.currentPage\n        };\n      }\n\n    case 'SET_TOTAL_USERS_COUNT':\n      {\n        return { ...state,\n          totalUsersCount: action.count\n        };\n      }\n\n    case 'TOGGLE_IS_FETCHING':\n      {\n        return { ...state,\n          isFetching: action.isFetching\n        };\n      }\n\n    case 'TOGGLE_IS_FOLLOWING_PROGRESS':\n      {\n        return { ...state,\n          followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id !== action.userId)\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  followSuccess: userId => ({\n    type: 'FOLLOW',\n    userId\n  }),\n  unfollowSuccess: userId => ({\n    type: 'UNFOLLOW',\n    userId\n  }),\n  setUsers: users => ({\n    type: 'SET_USERS',\n    users\n  }),\n  setCurrentPage: currentPage => ({\n    type: 'SET_CURRENT_PAGE',\n    currentPage\n  }),\n  setTotalUsersCount: totalUsersCount => ({\n    type: 'SET_TOTAL_USERS_COUNT',\n    count: totalUsersCount\n  }),\n  toggleIsFetching: isFetching => ({\n    type: 'TOGGLE_IS_FETCHING',\n    isFetching\n  }),\n  toggleFollowingProgress: (isFetching, userId) => ({\n    type: 'TOGGLE_IS_FOLLOWING_PROGRESS',\n    isFetching,\n    userId\n  })\n};\nexport const requestUsers = (page, pageSize) => {\n  return async (dispatch, getState) => {\n    dispatch(actions.toggleIsFetching(true));\n    dispatch(actions.setCurrentPage(page));\n    let data = await usersAPI.getUsers(page, pageSize);\n    dispatch(actions.toggleIsFetching(false));\n    dispatch(actions.setUsers(data.items));\n    dispatch(actions.setTotalUsersCount(data.totalCount));\n  };\n};\n\nconst _followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\n  dispatch(actions.toggleFollowingProgress(true, userId));\n  let data = await apiMethod(userId);\n\n  if (data.resultCode === 0) {\n    dispatch(actionCreator(userId));\n  }\n\n  dispatch(actions.toggleFollowingProgress(false, userId));\n};\n\nexport const unfollow = userId => {\n  return async dispatch => {\n    _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess);\n  };\n};\nexport const follow = userId => {\n  return async dispatch => {\n    _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess);\n  };\n};\nexport default usersReducer;","map":{"version":3,"sources":["/Users/a1/Desktop/app/no-bad-days-social-network-demo/src/redux/users-reducer.ts"],"names":["updateObjectInArray","usersAPI","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","userId","followed","count","filter","id","actions","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching","toggleFollowingProgress","requestUsers","page","dispatch","getState","data","getUsers","items","totalCount","_followUnfollowFlow","apiMethod","actionCreator","resultCode","unfollow","bind","follow"],"mappings":"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","sourcesContent":["import {updateObjectInArray} from \"../utils/validators/object-helpers\";\nimport {UserType} from \"../types/types\";\nimport {AppStateType, BaseThunkType, InferActionsTypes} from \"./redux-store\";\nimport {Dispatch} from \"redux\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {usersAPI} from \"../api/users-api\";\n\n/*const FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';*/\n\nlet initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 10,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: [] as Array<number> // array of users ids\n};\n\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case 'FOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\n            };\n        case 'UNFOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\n            };\n        case 'SET_USERS': {\n            return {\n                ...state,\n                users: action.users\n            }\n        }\n        case 'SET_CURRENT_PAGE': {\n            return {\n                ...state,\n                currentPage: action.currentPage\n            }\n        }\n        case 'SET_TOTAL_USERS_COUNT': {\n            return {\n                ...state,\n                totalUsersCount: action.count\n            }\n        }\n        case 'TOGGLE_IS_FETCHING': {\n            return {\n                ...state,\n                isFetching: action.isFetching\n            }\n        }\n        case 'TOGGLE_IS_FOLLOWING_PROGRESS': {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        }\n        default:\n            return state;\n    }\n};\n\ntype ActionsTypes = InferActionsTypes<typeof actions>\n\nexport const actions = {\n    followSuccess: (userId: number) => ({type: 'FOLLOW', userId} as const),\n\n    unfollowSuccess: (userId: number) => ({type: 'UNFOLLOW', userId} as const),\n\n    setUsers: (users: Array<UserType>) => ({type: 'SET_USERS', users} as const),\n\n    setCurrentPage: (currentPage: number) => ({\n        type: 'SET_CURRENT_PAGE',\n        currentPage\n    } as const),\n\n    setTotalUsersCount: (totalUsersCount: number) => ({\n        type: 'SET_TOTAL_USERS_COUNT',\n        count: totalUsersCount\n    } as const),\n\n    toggleIsFetching: (isFetching: boolean) => ({\n        type: 'TOGGLE_IS_FETCHING',\n        isFetching\n    } as const),\n\n    toggleFollowingProgress: (isFetching: boolean,\n                              userId: number) => ({\n        type: 'TOGGLE_IS_FOLLOWING_PROGRESS',\n        isFetching,\n        userId\n    } as const)\n}\n\ntype GetStateType = () => AppStateType\n\ntype ThunkType = BaseThunkType<ActionsTypes>\n\nexport const requestUsers = (page: number,\n                             pageSize: number): ThunkType => {\n    return async (dispatch, getState) => {\n\n        dispatch(actions.toggleIsFetching(true));\n        dispatch(actions.setCurrentPage(page));\n\n        let data = await usersAPI.getUsers(page, pageSize);\n        dispatch(actions.toggleIsFetching(false));\n        dispatch(actions.setUsers(data.items));\n        dispatch(actions.setTotalUsersCount(data.totalCount));\n    }\n};\n\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>,\n                                   userId: number,\n                                   apiMethod: any,\n                                   actionCreator: (userId: number) => ActionsTypes) => {\n    dispatch(actions.toggleFollowingProgress(true, userId));\n    let data = await apiMethod(userId);\n    if (data.resultCode === 0) {\n        dispatch(actionCreator(userId));\n    }\n    dispatch(actions.toggleFollowingProgress(false, userId));\n};\n\nexport const unfollow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess);\n    }\n};\nexport const follow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess);\n    }\n};\n\nexport default usersReducer;\n\ntype InitialStateType = typeof initialState"]},"metadata":{},"sourceType":"module"}