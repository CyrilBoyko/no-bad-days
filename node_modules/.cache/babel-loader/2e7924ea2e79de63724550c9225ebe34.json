{"ast":null,"code":"import { getAuthUserData } from \"./auth-reducer\";\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\nlet initialState = {\n  initialized: false,\n  globalError: null\n};\n\nconst appReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INITIALIZED_SUCCESS:\n      return { ...state,\n        initialized: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const initializedSuccess = () => ({\n  type: INITIALIZED_SUCCESS\n});\nexport const initializeApp = () => dispatch => {\n  let promise = dispatch(getAuthUserData());\n  promise.then(() => {\n    dispatch(initializedSuccess());\n  });\n};\nexport default appReducer;","map":{"version":3,"sources":["/Users/a1/Desktop/app/no-bad-days-social-network-demo/src/redux/app-reducer.ts"],"names":["getAuthUserData","INITIALIZED_SUCCESS","initialState","initialized","globalError","appReducer","state","action","type","initializedSuccess","initializeApp","dispatch","promise","then"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,gBAA9B;AAGA,MAAMC,mBAAmB,GAAG,qBAA5B;AAOA,IAAIC,YAAY,GAAG;AACfC,EAAAA,WAAW,EAAE,KADE;AAEfC,EAAAA,WAAW,EAAE;AAFE,CAAnB;;AAKA,MAAMC,UAAU,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAuC;AACtD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,mBAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHH,QAAAA,WAAW,EAAE;AAFV,OAAP;;AAIJ;AACI,aAAOG,KAAP;AAPR;AASH,CAVD;;AAYA,OAAO,MAAMG,kBAAkB,GAAG,OAAO;AAACD,EAAAA,IAAI,EAAEP;AAAP,CAAP,CAA3B;AAEP,OAAO,MAAMS,aAAa,GAAG,MAAOC,QAAD,IAAmB;AAClD,MAAIC,OAAO,GAAGD,QAAQ,CAACX,eAAe,EAAhB,CAAtB;AACAY,EAAAA,OAAO,CAACC,IAAR,CAAa,MAAM;AACfF,IAAAA,QAAQ,CAACF,kBAAkB,EAAnB,CAAR;AACH,GAFD;AAGH,CALM;AAQP,eAAeJ,UAAf","sourcesContent":["import {getAuthUserData} from \"./auth-reducer\";\n\n\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\n\ntype InitialStateType = {\n    initialized: boolean,\n    globalError: null\n}\n\nlet initialState = {\n    initialized: false,\n    globalError: null\n};\n\nconst appReducer = (state = initialState, action: any) => {\n    switch (action.type) {\n        case INITIALIZED_SUCCESS:\n            return {\n                ...state,\n                initialized: true\n            };\n        default:\n            return state;\n    }\n};\n\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS});\n\nexport const initializeApp = () => (dispatch: any) => {\n    let promise = dispatch(getAuthUserData());\n    promise.then(() => {\n        dispatch(initializedSuccess());\n    })\n};\n\n\nexport default appReducer;"]},"metadata":{},"sourceType":"module"}