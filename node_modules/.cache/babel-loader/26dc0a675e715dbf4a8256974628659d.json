{"ast":null,"code":"var _jsxFileName = \"/Users/a1/Desktop/app/my-app/src/components/Users/UsersContainer.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { follow, setCurrentPage, setUsers, unfollow, setTotalUsersCount, toggleIsFetching } from \"../../redux/users-reducer\";\nimport Users from \"./Users.jsx\";\nimport * as axios from \"axios\";\nimport Preloader from \"../common/Preloader/Preloader\";\nimport { getUsers } from \"../../api/api\";\n\nclass UsersContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onPageChanged = pageNumber => {\n      this.props.toggleIsFetching(true);\n      this.props.setCurrentPage(pageNumber);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`, {\n        withCredentials: true\n      }).then(response => {\n        this.props.toggleIsFetching(false);\n        this.props.setUsers(response.data.items);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    getUsers().then(response => {\n      this.props.toggleIsFetching(false);\n      this.props.setUsers(response.data.items);\n      this.props.setTotalUsersCount(response.data.totalCount);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.isFetching ? /*#__PURE__*/React.createElement(Preloader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 38\n      }\n    }) : null, /*#__PURE__*/React.createElement(Users, {\n      totalUsersCount: this.props.totalUsersCount,\n      pageSize: this.props.pageSize,\n      currentPage: this.props.currentPage,\n      onPageChanged: this.onPageChanged,\n      users: this.props.users,\n      follow: this.props.follow,\n      unfollow: this.props.unfollow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n};\n/*let mapDispatchToProps = (dispatch) => {\n    return {\n        follow: (userId) => {\n            dispatch(followAC(userId));\n        },\n        unfollow: (userId) => {\n            dispatch(unfollowAC(userId));\n        },\n        setUsers: (users) => {\n            dispatch(setUsersAC(users));\n        },\n        setCurrentPage: (pageNumber) => {\n            dispatch(setCurrentPageAC(pageNumber));\n        },\n        setTotalUsersCount: (totalCount) => {\n            dispatch(setTotalUsersCountAC(totalCount));\n        },\n        toggleIsFetching: (isFetching) => {\n            dispatch(toggleIsFetchingAC(isFetching));\n        }\n        }\n}*/\n\n\nexport default connect(mapStateToProps, {\n  follow,\n  unfollow,\n  setUsers,\n  setCurrentPage,\n  setTotalUsersCount,\n  toggleIsFetching\n})(UsersContainer);","map":{"version":3,"sources":["/Users/a1/Desktop/app/my-app/src/components/Users/UsersContainer.jsx"],"names":["React","connect","follow","setCurrentPage","setUsers","unfollow","setTotalUsersCount","toggleIsFetching","Users","axios","Preloader","getUsers","UsersContainer","Component","onPageChanged","pageNumber","props","get","pageSize","withCredentials","then","response","data","items","componentDidMount","totalCount","render","isFetching","totalUsersCount","currentPage","users","mapStateToProps","state","usersPage"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {\n    follow,\n    setCurrentPage,\n    setUsers,\n    unfollow,\n    setTotalUsersCount,\n    toggleIsFetching\n} from \"../../redux/users-reducer\";\nimport Users from \"./Users.jsx\";\nimport * as axios from \"axios\";\nimport Preloader from \"../common/Preloader/Preloader\";\nimport {getUsers} from \"../../api/api\";\n\nclass UsersContainer extends React.Component {\n    componentDidMount() {\n        this.props.toggleIsFetching(true);\n\n        getUsers().then(response => {\n                this.props.toggleIsFetching(false);\n                this.props.setUsers(response.data.items);\n                this.props.setTotalUsersCount(response.data.totalCount);\n            });\n    }\n\n    onPageChanged = (pageNumber) => {\n        this.props.toggleIsFetching(true);\n        this.props.setCurrentPage(pageNumber);\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`, {\n            withCredentials: true\n        })\n            .then(response => {\n                this.props.toggleIsFetching(false);\n            this.props.setUsers(response.data.items);\n        });\n    }\n\n    render() {\n        return <>\n            {this.props.isFetching ? <Preloader/> : null}\n            <Users totalUsersCount={this.props.totalUsersCount}\n                   pageSize={this.props.pageSize}\n                   currentPage={this.props.currentPage}\n                   onPageChanged={this.onPageChanged}\n                   users={this.props.users}\n                   follow={this.props.follow}\n                   unfollow={this.props.unfollow}/>\n                   </>\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        users: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        totalUsersCount: state.usersPage.totalUsersCount,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching\n    }\n}\n\n/*let mapDispatchToProps = (dispatch) => {\n    return {\n        follow: (userId) => {\n            dispatch(followAC(userId));\n        },\n        unfollow: (userId) => {\n            dispatch(unfollowAC(userId));\n        },\n        setUsers: (users) => {\n            dispatch(setUsersAC(users));\n        },\n        setCurrentPage: (pageNumber) => {\n            dispatch(setCurrentPageAC(pageNumber));\n        },\n        setTotalUsersCount: (totalCount) => {\n            dispatch(setTotalUsersCountAC(totalCount));\n        },\n        toggleIsFetching: (isFetching) => {\n            dispatch(toggleIsFetchingAC(isFetching));\n        }\n        }\n}*/\n\nexport default connect(mapStateToProps, {follow, unfollow, setUsers, setCurrentPage, setTotalUsersCount, toggleIsFetching})(UsersContainer);"]},"metadata":{},"sourceType":"module"}