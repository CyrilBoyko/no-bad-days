{"ast":null,"code":"import _objectSpread from\"/Users/a1/Desktop/app/no-bad-days-social-network-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{getAuthUserData}from\"./auth-reducer\";var initialState={initialized:false};var appReducer=function appReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case'SN/APP/INITIALIZED_SUCCESS':return _objectSpread({},state,{initialized:true});default:return state;}};export var actions={initializedSuccess:function initializedSuccess(){return{type:'SN/APP/INITIALIZED_SUCCESS'};}};export var initializeApp=function initializeApp(){return function(dispatch){var promise=dispatch(getAuthUserData());promise.then(function(){dispatch(actions.initializedSuccess());});};};export default appReducer;","map":{"version":3,"sources":["/Users/a1/Desktop/app/no-bad-days-social-network-demo/src/redux/app-reducer.ts"],"names":["getAuthUserData","initialState","initialized","appReducer","state","action","type","actions","initializedSuccess","initializeApp","dispatch","promise","then"],"mappings":"2KAAA,OAAQA,eAAR,KAA8B,gBAA9B,CAGA,GAAIC,CAAAA,YAAY,CAAG,CACfC,WAAW,CAAE,KADE,CAAnB,CAQA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAiE,IAAhEC,CAAAA,KAAgE,2DAAxDH,YAAwD,IAA1CI,CAAAA,MAA0C,2CAChF,OAAQA,MAAM,CAACC,IAAf,EACI,IAAK,4BAAL,CACI,wBACOF,KADP,EAEIF,WAAW,CAAE,IAFjB,GAIJ,QACI,MAAOE,CAAAA,KAAP,CAPR,CASH,CAVD,CAYA,MAAO,IAAMG,CAAAA,OAAO,CAAG,CACnBC,kBAAkB,CAAE,oCAAO,CAACF,IAAI,CAAE,4BAAP,CAAP,EADD,CAAhB,CAIP,MAAO,IAAMG,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,SAAM,UAACC,QAAD,CAAmB,CAClD,GAAIC,CAAAA,OAAO,CAAGD,QAAQ,CAACV,eAAe,EAAhB,CAAtB,CACAW,OAAO,CAACC,IAAR,CAAa,UAAM,CACfF,QAAQ,CAACH,OAAO,CAACC,kBAAR,EAAD,CAAR,CACH,CAFD,EAGH,CAL4B,EAAtB,CAOP,cAAeL,CAAAA,UAAf","sourcesContent":["import {getAuthUserData} from \"./auth-reducer\";\nimport {InferActionsTypes} from \"./redux-store\";\n\nlet initialState = {\n    initialized: false\n};\n\nexport type InitialStateType = typeof initialState\n\ntype ActionsType = InferActionsTypes<typeof actions>\n\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/APP/INITIALIZED_SUCCESS':\n            return {\n                ...state,\n                initialized: true\n            };\n        default:\n            return state;\n    }\n};\n\nexport const actions = {\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\n};\n\nexport const initializeApp = () => (dispatch: any) => {\n    let promise = dispatch(getAuthUserData());\n    promise.then(() => {\n        dispatch(actions.initializedSuccess());\n    })\n};\n\nexport default appReducer;"]},"metadata":{},"sourceType":"module"}