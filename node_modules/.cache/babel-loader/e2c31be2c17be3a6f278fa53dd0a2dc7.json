{"ast":null,"code":"import { auth } from \"../api/api\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.data,\n        isAuth: true\n      };\n\n    default:\n      return state;\n  }\n};\n/*export const authThunk = (userId, login, email) => {\n    return (dispatch) => {\n        dispatch(setAuthUserData(userId, login, email));\n        auth.authUser().then(data => {\n            if (data.resultCode == 0) {\n                let {id, login, email} = data.data;\n                dispatch(setAuthUserData(id, login, email));\n            }\n        });\n    }\n}*/\n\n\nexport const setAuthUserData = (userId, email, login) => ({\n  type: SET_USER_DATA,\n  data: {\n    userId,\n    email,\n    login\n  }\n});\nexport default authReducer;","map":{"version":3,"sources":["/Users/a1/Desktop/app/my-app/src/redux/auth-reducer.js"],"names":["auth","SET_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","data","setAuthUserData"],"mappings":"AAAA,SAAQA,IAAR,QAAmB,YAAnB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE,IAFP;AAGHL,QAAAA,MAAM,EAAE;AAHL,OAAP;;AAKJ;AACI,aAAOE,KAAP;AARR;AAUH,CAXD;AAaA;;;;;;;;;;;;;AAYA,OAAO,MAAMI,eAAe,GAAG,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,MAA2B;AAACK,EAAAA,IAAI,EAAET,aAAP;AAAsBU,EAAAA,IAAI,EAAE;AAACR,IAAAA,MAAD;AAASC,IAAAA,KAAT;AAAgBC,IAAAA;AAAhB;AAA5B,CAA3B,CAAxB;AAEP,eAAeE,WAAf","sourcesContent":["import {auth} from \"../api/api\";\n\nconst SET_USER_DATA = 'SET_USER_DATA';\n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.data,\n                isAuth: true\n            }\n        default:\n            return state;\n    }\n}\n\n/*export const authThunk = (userId, login, email) => {\n    return (dispatch) => {\n        dispatch(setAuthUserData(userId, login, email));\n        auth.authUser().then(data => {\n            if (data.resultCode == 0) {\n                let {id, login, email} = data.data;\n                dispatch(setAuthUserData(id, login, email));\n            }\n        });\n    }\n}*/\n\nexport const setAuthUserData = (userId, email, login) => ({type: SET_USER_DATA, data: {userId, email, login}})\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}