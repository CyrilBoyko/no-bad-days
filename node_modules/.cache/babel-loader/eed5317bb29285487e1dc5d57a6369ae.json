{"ast":null,"code":"import { usersAPI } from \"../api/api\";\nimport { updateObjectInArray } from \"../utils/validators/object-helpers\";\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 10,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: true,\n  followingInProgress: [] // array of users ids\n\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: updateObjectInArray(state.users, action.userId, 'id', {\n          followed: true\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: updateObjectInArray(state.users, action.userId, 'id', {\n          followed: false\n        })\n      };\n\n    case SET_USERS:\n      {\n        return { ...state,\n          users: action.users\n        };\n      }\n\n    case SET_CURRENT_PAGE:\n      {\n        return { ...state,\n          currentPage: action.currentPage\n        };\n      }\n\n    case SET_TOTAL_USERS_COUNT:\n      {\n        return { ...state,\n          totalUsersCount: action.count\n        };\n      }\n\n    case TOGGLE_IS_FETCHING:\n      {\n        return { ...state,\n          isFetching: action.isFetching\n        };\n      }\n\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      {\n        return { ...state,\n          followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id !== action.userId)\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const followSuccess = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollowSuccess = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsers = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setTotalUsersCount = totalUsersCount => ({\n  type: SET_TOTAL_USERS_COUNT,\n  count: totalUsersCount\n});\nexport const toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport const toggleFollowingProgress = (isFetching, userId) => ({\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\n  isFetching,\n  userId\n});\nexport const requestUsers = (page, pageSize) => {\n  return async (dispatch, getState) => {\n    dispatch(toggleIsFetching(true));\n    dispatch(setCurrentPage(page));\n    let data = await usersAPI.getUsers(page, pageSize);\n    dispatch(toggleIsFetching(false));\n    dispatch(setUsers(data.items));\n    dispatch(setTotalUsersCount(data.totalCount));\n  };\n};\n\nconst _followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\n  dispatch(toggleFollowingProgress(true, userId));\n  let data = await apiMethod(userId);\n\n  if (data.resultCode === 0) {\n    dispatch(actionCreator(userId));\n  }\n\n  dispatch(toggleFollowingProgress(false, userId));\n};\n\nexport const unfollow = userId => {\n  return async dispatch => {\n    _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess);\n  };\n};\nexport const follow = userId => {\n  return async dispatch => {\n    _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess);\n  };\n};\nexport default usersReducer;","map":{"version":3,"sources":["/Users/a1/Desktop/app/no-bad-days-social-network-demo/src/redux/users-reducer.ts"],"names":["usersAPI","updateObjectInArray","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","userId","followed","count","filter","id","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching","toggleFollowingProgress","requestUsers","page","dispatch","getState","data","getUsers","items","totalCount","_followUnfollowFlow","apiMethod","actionCreator","resultCode","unfollow","bind","follow"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,YAAvB;AACA,SAAQC,mBAAR,QAAkC,oCAAlC;AAMA,MAAMC,MAAM,GAAG,QAAf;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,qBAAqB,GAAG,uBAA9B;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;AACA,MAAMC,4BAA4B,GAAG,8BAArC;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,KAAK,EAAE,EADQ;AAEfC,EAAAA,QAAQ,EAAE,EAFK;AAGfC,EAAAA,eAAe,EAAE,CAHF;AAIfC,EAAAA,WAAW,EAAE,CAJE;AAKfC,EAAAA,UAAU,EAAE,IALG;AAMfC,EAAAA,mBAAmB,EAAE,EANN,CAM0B;;AAN1B,CAAnB;;AAWA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkE;AACnF,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKjB,MAAL;AACI,aAAO,EACH,GAAGe,KADA;AAEHP,QAAAA,KAAK,EAAET,mBAAmB,CAACgB,KAAK,CAACP,KAAP,EAAcQ,MAAM,CAACE,MAArB,EAA6B,IAA7B,EAAmC;AAACC,UAAAA,QAAQ,EAAE;AAAX,SAAnC;AAFvB,OAAP;;AAIJ,SAAKlB,QAAL;AACI,aAAO,EACH,GAAGc,KADA;AAEHP,QAAAA,KAAK,EAAET,mBAAmB,CAACgB,KAAK,CAACP,KAAP,EAAcQ,MAAM,CAACE,MAArB,EAA6B,IAA7B,EAAmC;AAACC,UAAAA,QAAQ,EAAE;AAAX,SAAnC;AAFvB,OAAP;;AAIJ,SAAKjB,SAAL;AAAgB;AACZ,eAAO,EACH,GAAGa,KADA;AAEHP,UAAAA,KAAK,EAAEQ,MAAM,CAACR;AAFX,SAAP;AAIH;;AACD,SAAKL,gBAAL;AAAuB;AACnB,eAAO,EACH,GAAGY,KADA;AAEHJ,UAAAA,WAAW,EAAEK,MAAM,CAACL;AAFjB,SAAP;AAIH;;AACD,SAAKP,qBAAL;AAA4B;AACxB,eAAO,EACH,GAAGW,KADA;AAEHL,UAAAA,eAAe,EAAEM,MAAM,CAACI;AAFrB,SAAP;AAIH;;AACD,SAAKf,kBAAL;AAAyB;AACrB,eAAO,EACH,GAAGU,KADA;AAEHH,UAAAA,UAAU,EAAEI,MAAM,CAACJ;AAFhB,SAAP;AAIH;;AACD,SAAKN,4BAAL;AAAmC;AAC/B,eAAO,EACH,GAAGS,KADA;AAEHF,UAAAA,mBAAmB,EAAEG,MAAM,CAACJ,UAAP,GACf,CAAC,GAAGG,KAAK,CAACF,mBAAV,EAA+BG,MAAM,CAACE,MAAtC,CADe,GAEfH,KAAK,CAACF,mBAAN,CAA0BQ,MAA1B,CAAiCC,EAAE,IAAIA,EAAE,KAAKN,MAAM,CAACE,MAArD;AAJH,SAAP;AAMH;;AACD;AACI,aAAOH,KAAP;AA5CR;AA8CH,CA/CD;;AA8DA,OAAO,MAAMQ,aAAa,GAAIL,MAAD,KAA8C;AAACD,EAAAA,IAAI,EAAEjB,MAAP;AAAekB,EAAAA;AAAf,CAA9C,CAAtB;AAOP,OAAO,MAAMM,eAAe,GAAIN,MAAD,KAAgD;AAACD,EAAAA,IAAI,EAAEhB,QAAP;AAAiBiB,EAAAA;AAAjB,CAAhD,CAAxB;AAOP,OAAO,MAAMO,QAAQ,GAAIjB,KAAD,KAAiD;AAACS,EAAAA,IAAI,EAAEf,SAAP;AAAkBM,EAAAA;AAAlB,CAAjD,CAAjB;AAOP,OAAO,MAAMkB,cAAc,GAAIf,WAAD,KAAoD;AAC9EM,EAAAA,IAAI,EAAEd,gBADwE;AAE9EQ,EAAAA;AAF8E,CAApD,CAAvB;AAUP,OAAO,MAAMgB,kBAAkB,GAAIjB,eAAD,KAA4D;AAC1FO,EAAAA,IAAI,EAAEb,qBADoF;AAE1FgB,EAAAA,KAAK,EAAEV;AAFmF,CAA5D,CAA3B;AAUP,OAAO,MAAMkB,gBAAgB,GAAIhB,UAAD,KAAsD;AAClFK,EAAAA,IAAI,EAAEZ,kBAD4E;AAElFO,EAAAA;AAFkF,CAAtD,CAAzB;AAWP,OAAO,MAAMiB,uBAAuB,GAAG,CAACjB,UAAD,EACCM,MADD,MACwD;AAC3FD,EAAAA,IAAI,EAAEX,4BADqF;AAE3FM,EAAAA,UAF2F;AAG3FM,EAAAA;AAH2F,CADxD,CAAhC;AAaP,OAAO,MAAMY,YAAY,GAAG,CAACC,IAAD,EACCtB,QADD,KACiC;AACzD,SAAO,OAAOuB,QAAP,EAAiBC,QAAjB,KAA8B;AAEjCD,IAAAA,QAAQ,CAACJ,gBAAgB,CAAC,IAAD,CAAjB,CAAR;AACAI,IAAAA,QAAQ,CAACN,cAAc,CAACK,IAAD,CAAf,CAAR;AAEA,QAAIG,IAAI,GAAG,MAAMpC,QAAQ,CAACqC,QAAT,CAAkBJ,IAAlB,EAAwBtB,QAAxB,CAAjB;AACAuB,IAAAA,QAAQ,CAACJ,gBAAgB,CAAC,KAAD,CAAjB,CAAR;AACAI,IAAAA,QAAQ,CAACP,QAAQ,CAACS,IAAI,CAACE,KAAN,CAAT,CAAR;AACAJ,IAAAA,QAAQ,CAACL,kBAAkB,CAACO,IAAI,CAACG,UAAN,CAAnB,CAAR;AACH,GATD;AAUH,CAZM;;AAcP,MAAMC,mBAAmB,GAAG,OAAON,QAAP,EACOd,MADP,EAEOqB,SAFP,EAGOC,aAHP,KAGkG;AAC1HR,EAAAA,QAAQ,CAACH,uBAAuB,CAAC,IAAD,EAAOX,MAAP,CAAxB,CAAR;AACA,MAAIgB,IAAI,GAAG,MAAMK,SAAS,CAACrB,MAAD,CAA1B;;AACA,MAAIgB,IAAI,CAACO,UAAL,KAAoB,CAAxB,EAA2B;AACvBT,IAAAA,QAAQ,CAACQ,aAAa,CAACtB,MAAD,CAAd,CAAR;AACH;;AACDc,EAAAA,QAAQ,CAACH,uBAAuB,CAAC,KAAD,EAAQX,MAAR,CAAxB,CAAR;AACH,CAVD;;AAYA,OAAO,MAAMwB,QAAQ,GAAIxB,MAAD,IAA+B;AACnD,SAAO,MAAOc,QAAP,IAAoB;AACvBM,IAAAA,mBAAmB,CAACN,QAAD,EAAWd,MAAX,EAAmBpB,QAAQ,CAAC4C,QAAT,CAAkBC,IAAlB,CAAuB7C,QAAvB,CAAnB,EAAqD0B,eAArD,CAAnB;AACH,GAFD;AAGH,CAJM;AAKP,OAAO,MAAMoB,MAAM,GAAI1B,MAAD,IAA+B;AACjD,SAAO,MAAOc,QAAP,IAAoB;AACvBM,IAAAA,mBAAmB,CAACN,QAAD,EAAWd,MAAX,EAAmBpB,QAAQ,CAAC8C,MAAT,CAAgBD,IAAhB,CAAqB7C,QAArB,CAAnB,EAAmDyB,aAAnD,CAAnB;AACH,GAFD;AAGH,CAJM;AAMP,eAAeT,YAAf","sourcesContent":["import {usersAPI} from \"../api/api\";\nimport {updateObjectInArray} from \"../utils/validators/object-helpers\";\nimport {UserType} from \"../types/types\";\nimport {AppStateType} from \"./redux-store\";\nimport {Dispatch} from \"redux\";\nimport {ThunkAction} from \"redux-thunk\";\n\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\n\nlet initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 10,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: [] as Array<number> // array of users ids\n};\n\ntype InitialStateType = typeof initialState\n\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\n            };\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\n            };\n        case SET_USERS: {\n            return {\n                ...state,\n                users: action.users\n            }\n        }\n        case SET_CURRENT_PAGE: {\n            return {\n                ...state,\n                currentPage: action.currentPage\n            }\n        }\n        case SET_TOTAL_USERS_COUNT: {\n            return {\n                ...state,\n                totalUsersCount: action.count\n            }\n        }\n        case TOGGLE_IS_FETCHING: {\n            return {\n                ...state,\n                isFetching: action.isFetching\n            }\n        }\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        }\n        default:\n            return state;\n    }\n};\n\ntype ActionsTypes = FollowSuccessActionType\n    | UnfollowSuccessActionType\n    | SetUsersActionType\n    | SetCurrentPageActionType\n    | SetTotalUsersCountActionType\n    | ToggleIsFetchingActionType\n    | ToggleFollowingProgressActionType;\n\ntype FollowSuccessActionType = {\n    type: typeof FOLLOW\n    userId: number\n}\n\nexport const followSuccess = (userId: number): FollowSuccessActionType => ({type: FOLLOW, userId});\n\ntype UnfollowSuccessActionType = {\n    type: typeof UNFOLLOW\n    userId: number\n}\n\nexport const unfollowSuccess = (userId: number): UnfollowSuccessActionType => ({type: UNFOLLOW, userId});\n\ntype SetUsersActionType = {\n    type: typeof SET_USERS\n    users: Array<UserType>\n}\n\nexport const setUsers = (users: Array<UserType>): SetUsersActionType => ({type: SET_USERS, users});\n\ntype SetCurrentPageActionType = {\n    type: typeof SET_CURRENT_PAGE\n    currentPage: number\n}\n\nexport const setCurrentPage = (currentPage: number): SetCurrentPageActionType => ({\n    type: SET_CURRENT_PAGE,\n    currentPage\n});\n\ntype SetTotalUsersCountActionType = {\n    type: typeof SET_TOTAL_USERS_COUNT\n    count: number\n}\n\nexport const setTotalUsersCount = (totalUsersCount: number): SetTotalUsersCountActionType => ({\n    type: SET_TOTAL_USERS_COUNT,\n    count: totalUsersCount\n});\n\ntype ToggleIsFetchingActionType = {\n    type: typeof TOGGLE_IS_FETCHING\n    isFetching: boolean\n}\n\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingActionType => ({\n    type: TOGGLE_IS_FETCHING,\n    isFetching\n});\n\ntype ToggleFollowingProgressActionType = {\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS\n    isFetching: boolean\n    userId: number\n}\n\nexport const toggleFollowingProgress = (isFetching: boolean,\n                                        userId: number): ToggleFollowingProgressActionType => ({\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\n    isFetching,\n    userId\n});\n\ntype GetStateType = () => AppStateType\n\ntype DispatchType = Dispatch<ActionsTypes>\n\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\n\nexport const requestUsers = (page: number,\n                             pageSize: number): ThunkType => {\n    return async (dispatch, getState) => {\n\n        dispatch(toggleIsFetching(true));\n        dispatch(setCurrentPage(page));\n\n        let data = await usersAPI.getUsers(page, pageSize);\n        dispatch(toggleIsFetching(false));\n        dispatch(setUsers(data.items));\n        dispatch(setTotalUsersCount(data.totalCount));\n    }\n};\n\nconst _followUnfollowFlow = async (dispatch: DispatchType,\n                                   userId: number,\n                                   apiMethod: any,\n                                   actionCreator: (userId: number) => FollowSuccessActionType | UnfollowSuccessActionType) => {\n    dispatch(toggleFollowingProgress(true, userId));\n    let data = await apiMethod(userId);\n    if (data.resultCode === 0) {\n        dispatch(actionCreator(userId));\n    }\n    dispatch(toggleFollowingProgress(false, userId));\n};\n\nexport const unfollow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess);\n    }\n};\nexport const follow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess);\n    }\n};\n\nexport default usersReducer;"]},"metadata":{},"sourceType":"module"}