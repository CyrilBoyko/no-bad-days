{"ast":null,"code":"import { usersAPI } from \"../api/api\";\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 5,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: true,\n  followingInProgress: [] //fake: 10\n\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    //case \"FAKE\": return {...state, fake: state.fake +1}\n    case FOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: true\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: false\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case SET_USERS:\n      {\n        return { ...state,\n          users: action.users\n        };\n      }\n\n    case SET_CURRENT_PAGE:\n      {\n        return { ...state,\n          currentPage: action.currentPage\n        };\n      }\n\n    case SET_TOTAL_USERS_COUNT:\n      {\n        return { ...state,\n          totalUsersCount: action.count\n        };\n      }\n\n    case TOGGLE_IS_FETCHING:\n      {\n        return { ...state,\n          isFetching: action.isFetching\n        };\n      }\n\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      {\n        return { ...state,\n          followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id != action.userId)\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const followSuccess = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollowSuccess = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsers = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setTotalUsersCount = totalUsersCount => ({\n  type: SET_TOTAL_USERS_COUNT,\n  count: totalUsersCount\n});\nexport const toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport const toggleFollowingProgress = (isFetching, userId) => ({\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\n  isFetching,\n  userId\n});\nexport const requestUsers = (page, pageSize) => {\n  return dispatch => {\n    dispatch(toggleIsFetching(true));\n    dispatch(setCurrentPage(page));\n    usersAPI.getUsers(page, pageSize).then(data => {\n      dispatch(toggleIsFetching(false));\n      dispatch(setUsers(data.items));\n      dispatch(setTotalUsersCount(data.totalCount));\n    });\n  };\n};\nexport const unfollow = userId => {\n  return dispatch => {\n    dispatch(toggleFollowingProgress(true, userId));\n    usersAPI.unfollow(userId).then(data => {\n      if (data.resultCode == 0) {\n        dispatch(unfollowSuccess(userId));\n      }\n\n      dispatch(toggleFollowingProgress(false, userId));\n    });\n  };\n};\nexport const follow = userId => {\n  return dispatch => {\n    dispatch(toggleFollowingProgress(true, userId));\n    usersAPI.follow(userId).then(data => {\n      if (data.resultCode == 0) {\n        dispatch(followSuccess(userId));\n      }\n\n      dispatch(toggleFollowingProgress(false, userId));\n    });\n  };\n};\nexport default usersReducer;","map":{"version":3,"sources":["/Users/a1/Desktop/app/my-app/src/redux/users-reducer.js"],"names":["usersAPI","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","map","u","id","userId","followed","count","filter","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching","toggleFollowingProgress","requestUsers","page","dispatch","getUsers","then","data","items","totalCount","unfollow","resultCode","follow"],"mappings":"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","sourcesContent":["import {usersAPI} from \"../api/api\";\n\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\n\nlet initialState = {\n    users: [],\n    pageSize: 5,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: [],\n    //fake: 10\n};\n\nconst usersReducer = (state = initialState, action) => {\n    switch (action.type) {\n        //case \"FAKE\": return {...state, fake: state.fake +1}\n        case FOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userId) {\n                        return {...u, followed: true}\n                    }\n                    return u;\n                })\n            }\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userId) {\n                        return {...u, followed: false}\n                    }\n                    return u;\n                })\n            }\n        case SET_USERS: {\n            return {\n                ...state,\n                users: action.users\n            }\n        }\n        case SET_CURRENT_PAGE: {\n            return {\n                ...state,\n                currentPage: action.currentPage\n            }\n        }\n        case SET_TOTAL_USERS_COUNT: {\n            return {\n                ...state,\n                totalUsersCount: action.count\n            }\n        }\n        case TOGGLE_IS_FETCHING: {\n            return {\n                ...state,\n                isFetching: action.isFetching\n            }\n        }\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id != action.userId)\n            }\n        }\n        default:\n            return state;\n    }\n}\n\nexport const followSuccess = (userId) => ({type: FOLLOW, userId})\nexport const unfollowSuccess = (userId) => ({type: UNFOLLOW, userId})\nexport const setUsers = (users) => ({type: SET_USERS, users})\nexport const setCurrentPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage})\nexport const setTotalUsersCount = (totalUsersCount) => ({type: SET_TOTAL_USERS_COUNT, count: totalUsersCount})\nexport const toggleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching})\nexport const toggleFollowingProgress = (isFetching, userId) => ({\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\n    isFetching,\n    userId\n})\n\nexport const requestUsers = (page, pageSize) => {\n    return (dispatch) => {\n\n        dispatch(toggleIsFetching(true));\n        dispatch(setCurrentPage(page));\n\n        usersAPI.getUsers(page, pageSize).then(data => {\n            dispatch(toggleIsFetching(false));\n            dispatch(setUsers(data.items));\n            dispatch(setTotalUsersCount(data.totalCount));\n        });\n    }\n}\nexport const unfollow = (userId) => {\n    return (dispatch) => {\n        dispatch(toggleFollowingProgress(true, userId));\n        usersAPI.unfollow(userId).then(data => {\n            if (data.resultCode == 0) {\n                dispatch(unfollowSuccess(userId));\n            }\n            dispatch(toggleFollowingProgress(false, userId));\n        });\n    }\n}\nexport const follow = (userId) => {\n    return (dispatch) => {\n        dispatch(toggleFollowingProgress(true, userId));\n        usersAPI.follow(userId).then(data => {\n            if (data.resultCode == 0) {\n                dispatch(followSuccess(userId));\n            }\n            dispatch(toggleFollowingProgress(false, userId));\n        });\n    }\n}\n\nexport default usersReducer;"]},"metadata":{},"sourceType":"module"}