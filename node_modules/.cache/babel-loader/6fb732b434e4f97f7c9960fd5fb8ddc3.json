{"ast":null,"code":"import React from\"react\";import{reduxForm}from\"redux-form\";import{createField,Input}from\"../common/FormsControls/FormsControls\";import{required}from\"../../utils/validators/validators\";import{connect}from\"react-redux\";import{login}from\"../../redux/auth-reducer\";import{Redirect}from\"react-router-dom\";import style from\"./../common/FormsControls/FormsControls.module.css\";var LoginForm=function LoginForm(_ref){var handleSubmit=_ref.handleSubmit,error=_ref.error,captchaUrl=_ref.captchaUrl;return/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleSubmit},createField('Email','email',[required],Input),createField('Password','password',[required],Input,{type:'password'}),createField(undefined,'rememberMe',[],Input,{type:'checkbox'}),captchaUrl&&/*#__PURE__*/React.createElement(\"img\",{src:captchaUrl}),captchaUrl&&createField('Symbols from image','captcha',[required],Input,{},'Remember me'),error&&/*#__PURE__*/React.createElement(\"div\",{className:style.formSummaryError},error),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",null,\"Login\")));};var LoginReduxForm=reduxForm({form:'login'})(LoginForm);var Login=function Login(props){var onSubmit=function onSubmit(formData){props.login(formData.email,formData.password,formData.rememberMe,formData.captcha);};if(props.isAuth){return/*#__PURE__*/React.createElement(Redirect,{to:'/profile'});}return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h1\",null,\"Login\"),/*#__PURE__*/React.createElement(LoginReduxForm,{onSubmit:onSubmit,captchaUrl:props.captchaUrl}));};var mapStateToProps=function mapStateToProps(state){return{captchaUrl:state.auth.captchaUrl,isAuth:state.auth.isAuth};};export default connect(mapStateToProps,{login:login})(Login);","map":{"version":3,"sources":["/Users/a1/Desktop/app/no-bad-days-social-network-demo/src/components/Login/Login.tsx"],"names":["React","reduxForm","createField","Input","required","connect","login","Redirect","style","LoginForm","handleSubmit","error","captchaUrl","type","undefined","formSummaryError","LoginReduxForm","form","Login","props","onSubmit","formData","email","password","rememberMe","captcha","isAuth","mapStateToProps","state","auth"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAA2BC,SAA3B,KAA2C,YAA3C,CACA,OAAQC,WAAR,CAAqBC,KAArB,KAAiC,uCAAjC,CACA,OAAQC,QAAR,KAAuB,mCAAvB,CACA,OAAQC,OAAR,KAAsB,aAAtB,CACA,OAAQC,KAAR,KAAoB,0BAApB,CACA,OAAQC,QAAR,KAAuB,kBAAvB,CACA,MAAOC,CAAAA,KAAP,KAAkB,oDAAlB,CAOA,GAAMC,CAAAA,SAAkG,CAAG,QAArGA,CAAAA,SAAqG,MAAuC,IAArCC,CAAAA,YAAqC,MAArCA,YAAqC,CAAvBC,KAAuB,MAAvBA,KAAuB,CAAhBC,UAAgB,MAAhBA,UAAgB,CAC9I,mBACI,4BAAM,QAAQ,CAAEF,YAAhB,EACKR,WAAW,CAA0B,OAA1B,CAAmC,OAAnC,CAA4C,CAACE,QAAD,CAA5C,CAAwDD,KAAxD,CADhB,CAEKD,WAAW,CAA0B,UAA1B,CAAsC,UAAtC,CAAkD,CAACE,QAAD,CAAlD,CAA8DD,KAA9D,CAAqE,CAACU,IAAI,CAAE,UAAP,CAArE,CAFhB,CAGKX,WAAW,CAA0BY,SAA1B,CAAqC,YAArC,CAAmD,EAAnD,CAAuDX,KAAvD,CAA8D,CAACU,IAAI,CAAE,UAAP,CAA9D,CAHhB,CAIKD,UAAU,eAAI,2BAAK,GAAG,CAAEA,UAAV,EAJnB,CAKKA,UAAU,EAAIV,WAAW,CAA0B,oBAA1B,CAAgD,SAAhD,CAA2D,CAACE,QAAD,CAA3D,CAAuED,KAAvE,CAA8E,EAA9E,CAAkF,aAAlF,CAL9B,CAMKQ,KAAK,eAAI,2BAAK,SAAS,CAAEH,KAAK,CAACO,gBAAtB,EAAyCJ,KAAzC,CANd,cAOI,4CACI,0CADJ,CAPJ,CADJ,CAaH,CAdD,CAgBA,GAAMK,CAAAA,cAAc,CAAGf,SAAS,CAAyC,CAACgB,IAAI,CAAE,OAAP,CAAzC,CAAT,CAAmER,SAAnE,CAAvB,CAoBA,GAAMS,CAAAA,KAAyD,CAAG,QAA5DA,CAAAA,KAA4D,CAACC,KAAD,CAAW,CAEzE,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,QAAD,CAAmC,CAChDF,KAAK,CAACb,KAAN,CAAYe,QAAQ,CAACC,KAArB,CAA4BD,QAAQ,CAACE,QAArC,CAA+CF,QAAQ,CAACG,UAAxD,CAAoEH,QAAQ,CAACI,OAA7E,EACH,CAFD,CAIA,GAAIN,KAAK,CAACO,MAAV,CAAkB,CACd,mBAAO,oBAAC,QAAD,EAAU,EAAE,CAAE,UAAd,EAAP,CACH,CAED,mBAAO,4CACH,sCADG,cAEH,oBAAC,cAAD,EAAgB,QAAQ,CAAEN,QAA1B,CACgB,UAAU,CAAED,KAAK,CAACP,UADlC,EAFG,CAAP,CAKH,CAfD,CAiBA,GAAMe,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,QAA6C,CACjEhB,UAAU,CAAEgB,KAAK,CAACC,IAAN,CAAWjB,UAD0C,CAEjEc,MAAM,CAAEE,KAAK,CAACC,IAAN,CAAWH,MAF8C,CAA7C,EAAxB,CAKA,cAAerB,CAAAA,OAAO,CAACsB,eAAD,CAAkB,CAACrB,KAAK,CAALA,KAAD,CAAlB,CAAP,CAAkCY,KAAlC,CAAf","sourcesContent":["import React from \"react\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\nimport {required} from \"../../utils/validators/validators\";\nimport {connect} from \"react-redux\";\nimport {login} from \"../../redux/auth-reducer\";\nimport {Redirect} from \"react-router-dom\";\nimport style from \"./../common/FormsControls/FormsControls.module.css\"\nimport {AppStateType} from \"../../redux/redux-store\";\n\ntype LoginFormOwnProps = {\n    captchaUrl: string | null\n}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit, error, captchaUrl}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            {createField<LoginFormValuesTypeKeys>('Email', 'email', [required], Input)}\n            {createField<LoginFormValuesTypeKeys>('Password', 'password', [required], Input, {type: 'password'})}\n            {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], Input, {type: 'checkbox'})}\n            {captchaUrl && <img src={captchaUrl}/>}\n            {captchaUrl && createField<LoginFormValuesTypeKeys>('Symbols from image', 'captcha', [required], Input, {}, 'Remember me')}\n            {error && <div className={style.formSummaryError}>{error}</div>}\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n};\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm);\n\ntype MapStatePropsType = {\n    captchaUrl: string | null\n    isAuth: boolean\n}\n\ntype MapDispatchPropsType = {\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\n}\n\nexport type LoginFormValuesType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string\n}\n\ntype LoginFormValuesTypeKeys = Extract<keyof LoginFormValuesType, string>\n\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\n\n    const onSubmit = (formData: LoginFormValuesType) => {\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\n    };\n\n    if (props.isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n    return <div>\n        <h1>Login</h1>\n        <LoginReduxForm onSubmit={onSubmit}\n                        captchaUrl={props.captchaUrl}/>\n    </div>\n};\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\n    captchaUrl: state.auth.captchaUrl,\n    isAuth: state.auth.isAuth\n});\n\nexport default connect(mapStateToProps, {login})(Login);"]},"metadata":{},"sourceType":"module"}