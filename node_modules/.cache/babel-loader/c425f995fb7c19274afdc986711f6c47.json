{"ast":null,"code":"import { ResultCodeForCaptchaEnum, ResultCodesEnum } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nimport { authAPI } from \"../api/auth-api\";\nimport { securityAPI } from \"../api/security-api\";\nconst SET_USER_DATA = 'no_bad_days-network/auth/SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'no_bad_days-network/auth/GET_CAPTCHA_URL_SUCCESS';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null // if null, then captcha is not required\n\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n    case GET_CAPTCHA_URL_SUCCESS:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  setAuthUserData: (userId, email, login, isAuth) => ({\n    type: SET_USER_DATA,\n    payload: {\n      userId,\n      email,\n      login,\n      isAuth\n    }\n  }),\n  getCaptchaUrlSuccess: captchaUrl => ({\n    type: GET_CAPTCHA_URL_SUCCESS,\n    payload: {\n      captchaUrl\n    }\n  })\n};\n/*type SetAuthUserDataActionPayloadType = {\n    userId: number | null\n    email: string | null\n    login: string | null\n    isAuth: boolean\n}\n\ntype SetAuthUserDataActionType = {\n    type: typeof SET_USER_DATA\n    payload: SetAuthUserDataActionPayloadType\n}*/\n\n/*export const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n    type: SET_USER_DATA, payload:\n        {userId, email, login, isAuth}\n});*/\n\n/*type GetCaptchaUrlSuccessActionType = {\n    type: typeof GET_CAPTCHA_URL_SUCCESS,\n    payload: {captchaUrl: string}\n}*/\n\n/*export const getCaptchaUrlSuccess = (captchaUrl: string) => ({\n    type: GET_CAPTCHA_URL_SUCCESS,\n    payload: {captchaUrl}\n});*/\n\nexport const getAuthUserData = () => async dispatch => {\n  const meData = await authAPI.me();\n\n  if (meData.resultCode === ResultCodesEnum.Success) {\n    let {\n      id,\n      email,\n      login\n    } = meData.data;\n    dispatch(actions.setAuthUserData(id, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe, captcha) => async dispatch => {\n  const data = await authAPI.login(email, password, rememberMe, captcha);\n\n  if (data.resultCode === ResultCodesEnum.Success) {\n    // success, get auth data\n    dispatch(getAuthUserData());\n  } else {\n    if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\n      dispatch(getCaptchaUrl());\n    }\n\n    let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\n    dispatch(stopSubmit(\"login\", {\n      _error: message\n    }));\n  }\n};\nexport const getCaptchaUrl = () => async dispatch => {\n  const data = await securityAPI.getCaptchaUrl();\n  const captchaUrl = data.url;\n  dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\n};\nexport const logout = () => async dispatch => {\n  const response = await authAPI.logout();\n\n  if (response.data.resultCode === ResultCodesEnum.Success) {\n    dispatch(actions.setAuthUserData(null, null, null, false));\n  }\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/a1/Desktop/app/no-bad-days-social-network-demo/src/redux/auth-reducer.ts"],"names":["ResultCodeForCaptchaEnum","ResultCodesEnum","stopSubmit","authAPI","securityAPI","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","initialState","userId","email","login","isAuth","captchaUrl","authReducer","state","action","type","payload","actions","setAuthUserData","getCaptchaUrlSuccess","getAuthUserData","dispatch","meData","me","resultCode","Success","id","data","password","rememberMe","captcha","CaptchaIsRequired","getCaptchaUrl","message","messages","length","_error","url","logout","response"],"mappings":"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","sourcesContent":["import {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\nimport {authAPI} from \"../api/auth-api\";\nimport {securityAPI} from \"../api/security-api\";\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\nimport {Action} from \"redux\";\n\nconst SET_USER_DATA = 'no_bad_days-network/auth/SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'no_bad_days-network/auth/GET_CAPTCHA_URL_SUCCESS';\n\nlet initialState = {\n    userId: null as number | null,\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false as boolean,\n    captchaUrl: null as string | null // if null, then captcha is not required\n};\n\nconst authReducer = (state = initialState, action: any): InitialStateType => {\n    switch (action.type) {\n        case SET_USER_DATA:\n        case GET_CAPTCHA_URL_SUCCESS:\n            return {\n                ...state,\n                ...action.payload\n            };\n        default:\n            return state;\n    }\n};\n\nexport const actions = {\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n        type: SET_USER_DATA, payload:\n            {userId, email, login, isAuth}\n    } as const),\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\n        type: GET_CAPTCHA_URL_SUCCESS,\n        payload: {captchaUrl}\n    } as const)\n};\n\n/*type SetAuthUserDataActionPayloadType = {\n    userId: number | null\n    email: string | null\n    login: string | null\n    isAuth: boolean\n}\n\ntype SetAuthUserDataActionType = {\n    type: typeof SET_USER_DATA\n    payload: SetAuthUserDataActionPayloadType\n}*/\n\n/*export const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n    type: SET_USER_DATA, payload:\n        {userId, email, login, isAuth}\n});*/\n\n/*type GetCaptchaUrlSuccessActionType = {\n    type: typeof GET_CAPTCHA_URL_SUCCESS,\n    payload: {captchaUrl: string}\n}*/\n\n/*export const getCaptchaUrlSuccess = (captchaUrl: string) => ({\n    type: GET_CAPTCHA_URL_SUCCESS,\n    payload: {captchaUrl}\n});*/\n\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\n    const meData = await authAPI.me();\n\n    if (meData.resultCode === ResultCodesEnum.Success) {\n        let {id, email, login} = meData.data;\n        dispatch(actions.setAuthUserData(id, email, login, true));\n    }\n};\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\n    const data = await authAPI.login(email, password, rememberMe, captcha);\n    if (data.resultCode === ResultCodesEnum.Success) {\n        // success, get auth data\n        dispatch(getAuthUserData())\n    } else {\n        if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\n            dispatch(getCaptchaUrl());\n        }\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\n        dispatch(stopSubmit(\"login\", {_error: message}));\n    }\n};\n\nexport const getCaptchaUrl = () => async (dispatch: any) => {\n    const data = await securityAPI.getCaptchaUrl();\n    const captchaUrl = data.url;\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\n\n};\n\nexport const logout = () => async (dispatch: any) => {\n    const response = await authAPI.logout();\n    if (response.data.resultCode === ResultCodesEnum.Success) {\n        dispatch(actions.setAuthUserData(null, null, null, false));\n    }\n};\n\nexport default authReducer;\n\nexport type InitialStateType = typeof initialState\n\ntype ActionsType = InferActionsTypes<typeof actions>\n\ntype ThunkType<ExtraActionsType extends Action = {}> = BaseThunkType<ActionsType | ExtraActionsType>"]},"metadata":{},"sourceType":"module"}