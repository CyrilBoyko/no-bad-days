{"ast":null,"code":"import { stopSubmit } from \"redux-form\";\nimport { profileAPI } from \"../api/profile-api\";\n\n/*const ADD_POST = 'SN/PROFILE/ADD-POST';\nconst SET_USER_PROFILE = 'SN/PROFILE/SET_USER_PROFILE';\nconst SET_STATUS = 'SN/PROFILE/SET_STATUS';\nconst DELETE_POST = 'SN/PROFILE/DELETE_POST';\nconst SAVE_PHOTO_SUCCESS = 'SN/PROFILE/SAVE_PHOTO_SUCCESS';*/\nlet initialState = {\n  posts: [{\n    id: 1,\n    message: 'Hi, how are you?',\n    likesCount: 0\n  }, {\n    id: 2,\n    message: 'It\\'s my first post',\n    likesCount: 23\n  }],\n  profile: null,\n  status: '',\n  newPostText: ''\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SN/PROFILE/ADD-POST':\n      {\n        let newPost = {\n          id: state.posts.length + 1,\n          message: action.newPostText,\n          likesCount: 0\n        };\n        return { ...state,\n          posts: [...state.posts, newPost],\n          newPostText: ''\n        };\n      }\n\n    case 'SN/PROFILE/SET_USER_PROFILE':\n      {\n        return { ...state,\n          profile: action.profile\n        };\n      }\n\n    case 'SN/PROFILE/SET_STATUS':\n      {\n        return { ...state,\n          status: action.status\n        };\n      }\n\n    case 'SN/PROFILE/DELETE_POST':\n      {\n        return { ...state,\n          posts: state.posts.filter(p => p.id !== action.postId)\n        };\n      }\n\n    case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\n      {\n        return { ...state,\n          profile: { ...state.profile,\n            photos: action.photos\n          }\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  addPostActionCreator: newPostText => ({\n    type: 'SN/PROFILE/ADD-POST',\n    newPostText\n  }),\n  setUserProfile: profile => ({\n    type: 'SN/PROFILE/SET_USER_PROFILE',\n    profile\n  }),\n  deletePost: postId => ({\n    type: 'SN/PROFILE/DELETE_POST',\n    postId\n  }),\n  savePhotoSuccess: photos => ({\n    type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS',\n    photos\n  }),\n  setStatus: status => ({\n    type: 'SN/PROFILE/SET_STATUS',\n    status\n  })\n};\n/*type AddPostActionCreatorActionType = {\n    type: typeof ADD_POST\n    newPostText: string\n}*/\n\n/*export const addPostActionCreator = (newPostText: string) => ({type: ADD_POST, newPostText});*/\n\n/*type SetUserProfileActionType = {\n    type: typeof SET_USER_PROFILE\n    profile: ProfileType\n}*/\n\n/*\nexport const setUserProfile = (profile: ProfileType) => ({type: SET_USER_PROFILE, profile});\n*/\n\n/*type DeletePostActionType = {\n    type: typeof DELETE_POST\n    postId: number\n}*/\n\n/*\nexport const deletePost = (postId: number) => ({type: DELETE_POST, postId});\n*/\n\n/*\ntype SavePhotoSuccessActionType = {\n    type: typeof SAVE_PHOTO_SUCCESS\n    photos: PhotosType\n}\n*/\n\n/*\nexport const savePhotoSuccess = (photos: PhotosType) => ({type: SAVE_PHOTO_SUCCESS, photos});\n*/\n\nexport const getUserProfile = userId => async dispatch => {\n  const data = await profileAPI.getProfile(userId);\n  dispatch(actions.setUserProfile(data));\n};\n/*type SetStatusActionType = {\n    type: typeof SET_STATUS\n    status: string\n}*/\n\n/*\nexport const setStatus = (status: string) => ({type: SET_STATUS, status});\n*/\n\nexport const getStatus = userId => async dispatch => {\n  const data = await profileAPI.getStatus(userId);\n  dispatch(actions.setStatus(data));\n};\nexport const updateStatus = status => async dispatch => {\n  try {\n    const data = await profileAPI.updateStatus(status);\n\n    if (data.resultCode === 0) {\n      dispatch(actions.setStatus(status));\n    }\n  } catch (error) {//\n  }\n};\nexport const savePhoto = file => async dispatch => {\n  const data = await profileAPI.savePhoto(file);\n\n  if (data.resultCode === 0) {\n    dispatch(actions.savePhotoSuccess(data.data.photos));\n  }\n};\nexport const saveProfile = profile => async (dispatch, getState) => {\n  const userId = getState().auth.userId;\n  const data = await profileAPI.saveProfile(profile);\n\n  if (data.resultCode === 0) {\n    if (userId != null) {\n      dispatch(getUserProfile(userId));\n    } else {\n      throw new Error(\"userId can't be null\");\n    }\n  } else {\n    dispatch(stopSubmit(\"edit-profile\", {\n      _error: data.messages[0]\n    }));\n    return Promise.reject(data.messages[0]);\n  }\n};\nexport default profileReducer;","map":{"version":3,"sources":["/Users/a1/Desktop/app/no-bad-days-social-network-demo/src/redux/profile-reducer.ts"],"names":["stopSubmit","profileAPI","initialState","posts","id","message","likesCount","profile","status","newPostText","profileReducer","state","action","type","newPost","length","filter","p","postId","photos","actions","addPostActionCreator","setUserProfile","deletePost","savePhotoSuccess","setStatus","getUserProfile","userId","dispatch","data","getProfile","getStatus","updateStatus","resultCode","error","savePhoto","file","saveProfile","getState","auth","Error","_error","messages","Promise","reject"],"mappings":"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","sourcesContent":["import {FormAction, stopSubmit} from \"redux-form\";\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\nimport {usersAPI} from \"../api/users-api\";\nimport {profileAPI} from \"../api/profile-api\";\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\n\n/*const ADD_POST = 'SN/PROFILE/ADD-POST';\nconst SET_USER_PROFILE = 'SN/PROFILE/SET_USER_PROFILE';\nconst SET_STATUS = 'SN/PROFILE/SET_STATUS';\nconst DELETE_POST = 'SN/PROFILE/DELETE_POST';\nconst SAVE_PHOTO_SUCCESS = 'SN/PROFILE/SAVE_PHOTO_SUCCESS';*/\n\nlet initialState = {\n    posts: [\n        {id: 1, message: 'Hi, how are you?', likesCount: 0},\n        {id: 2, message: 'It\\'s my first post', likesCount: 23}\n    ] as Array<PostType>,\n    profile: null as ProfileType | null,\n    status: '',\n    newPostText: ''\n};\n\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/PROFILE/ADD-POST': {\n            let newPost = {\n                id: state.posts.length + 1,\n                message: action.newPostText,\n                likesCount: 0\n            };\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n                newPostText: ''\n            };\n        }\n        case 'SN/PROFILE/SET_USER_PROFILE': {\n            return {\n                ...state,\n                profile: action.profile\n            }\n        }\n        case 'SN/PROFILE/SET_STATUS': {\n            return {\n                ...state,\n                status: action.status\n            }\n        }\n        case 'SN/PROFILE/DELETE_POST': {\n            return {\n                ...state, posts: state.posts.filter(p => p.id !== action.postId)\n            }\n        }\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS': {\n            return {\n                ...state, profile: {...state.profile, photos: action.photos} as ProfileType\n            }\n        }\n        default:\n            return state;\n    }\n};\n\nexport const actions = {\n    addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD-POST', newPostText} as const),\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile} as const),\n    deletePost: (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const),\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const)\n};\n\n/*type AddPostActionCreatorActionType = {\n    type: typeof ADD_POST\n    newPostText: string\n}*/\n\n/*export const addPostActionCreator = (newPostText: string) => ({type: ADD_POST, newPostText});*/\n\n/*type SetUserProfileActionType = {\n    type: typeof SET_USER_PROFILE\n    profile: ProfileType\n}*/\n\n/*\nexport const setUserProfile = (profile: ProfileType) => ({type: SET_USER_PROFILE, profile});\n*/\n\n/*type DeletePostActionType = {\n    type: typeof DELETE_POST\n    postId: number\n}*/\n\n/*\nexport const deletePost = (postId: number) => ({type: DELETE_POST, postId});\n*/\n\n/*\ntype SavePhotoSuccessActionType = {\n    type: typeof SAVE_PHOTO_SUCCESS\n    photos: PhotosType\n}\n*/\n\n/*\nexport const savePhotoSuccess = (photos: PhotosType) => ({type: SAVE_PHOTO_SUCCESS, photos});\n*/\n\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\n    const data = await profileAPI.getProfile(userId);\n    dispatch(actions.setUserProfile(data));\n};\n\n/*type SetStatusActionType = {\n    type: typeof SET_STATUS\n    status: string\n}*/\n\n/*\nexport const setStatus = (status: string) => ({type: SET_STATUS, status});\n*/\n\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\n    const data = await profileAPI.getStatus(userId);\n    dispatch(actions.setStatus(data));\n};\n\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\n    try {\n        const data = await profileAPI.updateStatus(status);\n        if (data.resultCode === 0) {\n            dispatch(actions.setStatus(status));\n        }\n    } catch (error) {\n        //\n    }\n};\n\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\n    const data = await profileAPI.savePhoto(file);\n    if (data.resultCode === 0) {\n        dispatch(actions.savePhotoSuccess(data.data.photos));\n    }\n};\n\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\n    const userId = getState().auth.userId;\n    const data = await profileAPI.saveProfile(profile);\n    if (data.resultCode === 0) {\n        if (userId != null) {\n            dispatch(getUserProfile(userId));\n        } else {\n            throw new Error(\"userId can't be null\")\n        }\n    } else {\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}));\n        return Promise.reject(data.messages[0]);\n    }\n};\n\nexport default profileReducer;\n\nexport type InitialStateType = typeof initialState\n\ntype ActionsType = InferActionsTypes<typeof actions>\n\ntype ThunkType = BaseThunkType<ActionsType | FormAction>"]},"metadata":{},"sourceType":"module"}